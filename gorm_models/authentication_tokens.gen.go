// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAuthenticationToken(db *gorm.DB, opts ...gen.DOOption) authenticationToken {
	_authenticationToken := authenticationToken{}

	_authenticationToken.authenticationTokenDo.UseDB(db, opts...)
	_authenticationToken.authenticationTokenDo.UseModel(&model.AuthenticationToken{})

	tableName := _authenticationToken.authenticationTokenDo.TableName()
	_authenticationToken.ALL = field.NewAsterisk(tableName)
	_authenticationToken.ID = field.NewInt64(tableName, "id")
	_authenticationToken.Token = field.NewString(tableName, "token")
	_authenticationToken.Createdat = field.NewTime(tableName, "createdat")
	_authenticationToken.UserID = field.NewInt64(tableName, "user_id")

	_authenticationToken.fillFieldMap()

	return _authenticationToken
}

type authenticationToken struct {
	authenticationTokenDo authenticationTokenDo

	ALL       field.Asterisk
	ID        field.Int64
	Token     field.String
	Createdat field.Time
	UserID    field.Int64

	fieldMap map[string]field.Expr
}

func (a authenticationToken) Table(newTableName string) *authenticationToken {
	a.authenticationTokenDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authenticationToken) As(alias string) *authenticationToken {
	a.authenticationTokenDo.DO = *(a.authenticationTokenDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authenticationToken) updateTableName(table string) *authenticationToken {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Token = field.NewString(table, "token")
	a.Createdat = field.NewTime(table, "createdat")
	a.UserID = field.NewInt64(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *authenticationToken) WithContext(ctx context.Context) *authenticationTokenDo {
	return a.authenticationTokenDo.WithContext(ctx)
}

func (a authenticationToken) TableName() string { return a.authenticationTokenDo.TableName() }

func (a authenticationToken) Alias() string { return a.authenticationTokenDo.Alias() }

func (a *authenticationToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authenticationToken) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["token"] = a.Token
	a.fieldMap["createdat"] = a.Createdat
	a.fieldMap["user_id"] = a.UserID
}

func (a authenticationToken) clone(db *gorm.DB) authenticationToken {
	a.authenticationTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authenticationToken) replaceDB(db *gorm.DB) authenticationToken {
	a.authenticationTokenDo.ReplaceDB(db)
	return a
}

type authenticationTokenDo struct{ gen.DO }

func (a authenticationTokenDo) Debug() *authenticationTokenDo {
	return a.withDO(a.DO.Debug())
}

func (a authenticationTokenDo) WithContext(ctx context.Context) *authenticationTokenDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authenticationTokenDo) ReadDB() *authenticationTokenDo {
	return a.Clauses(dbresolver.Read)
}

func (a authenticationTokenDo) WriteDB() *authenticationTokenDo {
	return a.Clauses(dbresolver.Write)
}

func (a authenticationTokenDo) Session(config *gorm.Session) *authenticationTokenDo {
	return a.withDO(a.DO.Session(config))
}

func (a authenticationTokenDo) Clauses(conds ...clause.Expression) *authenticationTokenDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authenticationTokenDo) Returning(value interface{}, columns ...string) *authenticationTokenDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authenticationTokenDo) Not(conds ...gen.Condition) *authenticationTokenDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authenticationTokenDo) Or(conds ...gen.Condition) *authenticationTokenDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authenticationTokenDo) Select(conds ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authenticationTokenDo) Where(conds ...gen.Condition) *authenticationTokenDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authenticationTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *authenticationTokenDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authenticationTokenDo) Order(conds ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authenticationTokenDo) Distinct(cols ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authenticationTokenDo) Omit(cols ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authenticationTokenDo) Join(table schema.Tabler, on ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authenticationTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authenticationTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authenticationTokenDo) Group(cols ...field.Expr) *authenticationTokenDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authenticationTokenDo) Having(conds ...gen.Condition) *authenticationTokenDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authenticationTokenDo) Limit(limit int) *authenticationTokenDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authenticationTokenDo) Offset(offset int) *authenticationTokenDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authenticationTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authenticationTokenDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authenticationTokenDo) Unscoped() *authenticationTokenDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authenticationTokenDo) Create(values ...*model.AuthenticationToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authenticationTokenDo) CreateInBatches(values []*model.AuthenticationToken, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authenticationTokenDo) Save(values ...*model.AuthenticationToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authenticationTokenDo) First() (*model.AuthenticationToken, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationToken), nil
	}
}

func (a authenticationTokenDo) Take() (*model.AuthenticationToken, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationToken), nil
	}
}

func (a authenticationTokenDo) Last() (*model.AuthenticationToken, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationToken), nil
	}
}

func (a authenticationTokenDo) Find() ([]*model.AuthenticationToken, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthenticationToken), err
}

func (a authenticationTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthenticationToken, err error) {
	buf := make([]*model.AuthenticationToken, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authenticationTokenDo) FindInBatches(result *[]*model.AuthenticationToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authenticationTokenDo) Attrs(attrs ...field.AssignExpr) *authenticationTokenDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authenticationTokenDo) Assign(attrs ...field.AssignExpr) *authenticationTokenDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authenticationTokenDo) Joins(fields ...field.RelationField) *authenticationTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authenticationTokenDo) Preload(fields ...field.RelationField) *authenticationTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authenticationTokenDo) FirstOrInit() (*model.AuthenticationToken, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationToken), nil
	}
}

func (a authenticationTokenDo) FirstOrCreate() (*model.AuthenticationToken, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationToken), nil
	}
}

func (a authenticationTokenDo) FindByPage(offset int, limit int) (result []*model.AuthenticationToken, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authenticationTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authenticationTokenDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authenticationTokenDo) Delete(models ...*model.AuthenticationToken) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authenticationTokenDo) withDO(do gen.Dao) *authenticationTokenDo {
	a.DO = *do.(*gen.DO)
	return a
}
