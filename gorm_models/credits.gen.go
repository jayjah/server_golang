// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCredit(db *gorm.DB, opts ...gen.DOOption) credit {
	_credit := credit{}

	_credit.creditDo.UseDB(db, opts...)
	_credit.creditDo.UseModel(&model.Credit{})

	tableName := _credit.creditDo.TableName()
	_credit.ALL = field.NewAsterisk(tableName)
	_credit.ID = field.NewInt64(tableName, "id")
	_credit.Value = field.NewInt32(tableName, "value")
	_credit.Type = field.NewString(tableName, "type")

	_credit.fillFieldMap()

	return _credit
}

type credit struct {
	creditDo creditDo

	ALL   field.Asterisk
	ID    field.Int64
	Value field.Int32
	Type  field.String

	fieldMap map[string]field.Expr
}

func (c credit) Table(newTableName string) *credit {
	c.creditDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c credit) As(alias string) *credit {
	c.creditDo.DO = *(c.creditDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *credit) updateTableName(table string) *credit {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Value = field.NewInt32(table, "value")
	c.Type = field.NewString(table, "type")

	c.fillFieldMap()

	return c
}

func (c *credit) WithContext(ctx context.Context) *creditDo { return c.creditDo.WithContext(ctx) }

func (c credit) TableName() string { return c.creditDo.TableName() }

func (c credit) Alias() string { return c.creditDo.Alias() }

func (c *credit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *credit) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["value"] = c.Value
	c.fieldMap["type"] = c.Type
}

func (c credit) clone(db *gorm.DB) credit {
	c.creditDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c credit) replaceDB(db *gorm.DB) credit {
	c.creditDo.ReplaceDB(db)
	return c
}

type creditDo struct{ gen.DO }

func (c creditDo) Debug() *creditDo {
	return c.withDO(c.DO.Debug())
}

func (c creditDo) WithContext(ctx context.Context) *creditDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c creditDo) ReadDB() *creditDo {
	return c.Clauses(dbresolver.Read)
}

func (c creditDo) WriteDB() *creditDo {
	return c.Clauses(dbresolver.Write)
}

func (c creditDo) Session(config *gorm.Session) *creditDo {
	return c.withDO(c.DO.Session(config))
}

func (c creditDo) Clauses(conds ...clause.Expression) *creditDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c creditDo) Returning(value interface{}, columns ...string) *creditDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c creditDo) Not(conds ...gen.Condition) *creditDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c creditDo) Or(conds ...gen.Condition) *creditDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c creditDo) Select(conds ...field.Expr) *creditDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c creditDo) Where(conds ...gen.Condition) *creditDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c creditDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *creditDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c creditDo) Order(conds ...field.Expr) *creditDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c creditDo) Distinct(cols ...field.Expr) *creditDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c creditDo) Omit(cols ...field.Expr) *creditDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c creditDo) Join(table schema.Tabler, on ...field.Expr) *creditDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c creditDo) LeftJoin(table schema.Tabler, on ...field.Expr) *creditDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c creditDo) RightJoin(table schema.Tabler, on ...field.Expr) *creditDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c creditDo) Group(cols ...field.Expr) *creditDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c creditDo) Having(conds ...gen.Condition) *creditDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c creditDo) Limit(limit int) *creditDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c creditDo) Offset(offset int) *creditDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c creditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *creditDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c creditDo) Unscoped() *creditDo {
	return c.withDO(c.DO.Unscoped())
}

func (c creditDo) Create(values ...*model.Credit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c creditDo) CreateInBatches(values []*model.Credit, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c creditDo) Save(values ...*model.Credit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c creditDo) First() (*model.Credit, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credit), nil
	}
}

func (c creditDo) Take() (*model.Credit, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credit), nil
	}
}

func (c creditDo) Last() (*model.Credit, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credit), nil
	}
}

func (c creditDo) Find() ([]*model.Credit, error) {
	result, err := c.DO.Find()
	return result.([]*model.Credit), err
}

func (c creditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Credit, err error) {
	buf := make([]*model.Credit, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c creditDo) FindInBatches(result *[]*model.Credit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c creditDo) Attrs(attrs ...field.AssignExpr) *creditDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c creditDo) Assign(attrs ...field.AssignExpr) *creditDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c creditDo) Joins(fields ...field.RelationField) *creditDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c creditDo) Preload(fields ...field.RelationField) *creditDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c creditDo) FirstOrInit() (*model.Credit, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credit), nil
	}
}

func (c creditDo) FirstOrCreate() (*model.Credit, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credit), nil
	}
}

func (c creditDo) FindByPage(offset int, limit int) (result []*model.Credit, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c creditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c creditDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c creditDo) Delete(models ...*model.Credit) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *creditDo) withDO(do gen.Dao) *creditDo {
	c.DO = *do.(*gen.DO)
	return c
}
