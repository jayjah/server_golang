// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		AuthenticationToken:     newAuthenticationToken(db, opts...),
		ClientConfig:            newClientConfig(db, opts...),
		Credit:                  newCredit(db, opts...),
		Event:                   newEvent(db, opts...),
		Feedback:                newFeedback(db, opts...),
		Holiday:                 newHoliday(db, opts...),
		Image:                   newImage(db, opts...),
		Location:                newLocation(db, opts...),
		LocationImage:           newLocationImage(db, opts...),
		News:                    newNews(db, opts...),
		NewsletterParticipation: newNewsletterParticipation(db, opts...),
		PushToken:               newPushToken(db, opts...),
		Registration:            newRegistration(db, opts...),
		ServerConfig:            newServerConfig(db, opts...),
		Todo:                    newTodo(db, opts...),
		Trainer:                 newTrainer(db, opts...),
		Training:                newTraining(db, opts...),
		TrainingDay:             newTrainingDay(db, opts...),
		TrainingTrainer:         newTrainingTrainer(db, opts...),
		User:                    newUser(db, opts...),
		UserCredit:              newUserCredit(db, opts...),
		UserEvent:               newUserEvent(db, opts...),
		UserTraining:            newUserTraining(db, opts...),
		UserTrainingInternal:    newUserTrainingInternal(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AuthenticationToken     authenticationToken
	ClientConfig            clientConfig
	Credit                  credit
	Event                   event
	Feedback                feedback
	Holiday                 holiday
	Image                   image
	Location                location
	LocationImage           locationImage
	News                    news
	NewsletterParticipation newsletterParticipation
	PushToken               pushToken
	Registration            registration
	ServerConfig            serverConfig
	Todo                    todo
	Trainer                 trainer
	Training                training
	TrainingDay             trainingDay
	TrainingTrainer         trainingTrainer
	User                    user
	UserCredit              userCredit
	UserEvent               userEvent
	UserTraining            userTraining
	UserTrainingInternal    userTrainingInternal
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AuthenticationToken:     q.AuthenticationToken.clone(db),
		ClientConfig:            q.ClientConfig.clone(db),
		Credit:                  q.Credit.clone(db),
		Event:                   q.Event.clone(db),
		Feedback:                q.Feedback.clone(db),
		Holiday:                 q.Holiday.clone(db),
		Image:                   q.Image.clone(db),
		Location:                q.Location.clone(db),
		LocationImage:           q.LocationImage.clone(db),
		News:                    q.News.clone(db),
		NewsletterParticipation: q.NewsletterParticipation.clone(db),
		PushToken:               q.PushToken.clone(db),
		Registration:            q.Registration.clone(db),
		ServerConfig:            q.ServerConfig.clone(db),
		Todo:                    q.Todo.clone(db),
		Trainer:                 q.Trainer.clone(db),
		Training:                q.Training.clone(db),
		TrainingDay:             q.TrainingDay.clone(db),
		TrainingTrainer:         q.TrainingTrainer.clone(db),
		User:                    q.User.clone(db),
		UserCredit:              q.UserCredit.clone(db),
		UserEvent:               q.UserEvent.clone(db),
		UserTraining:            q.UserTraining.clone(db),
		UserTrainingInternal:    q.UserTrainingInternal.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AuthenticationToken:     q.AuthenticationToken.replaceDB(db),
		ClientConfig:            q.ClientConfig.replaceDB(db),
		Credit:                  q.Credit.replaceDB(db),
		Event:                   q.Event.replaceDB(db),
		Feedback:                q.Feedback.replaceDB(db),
		Holiday:                 q.Holiday.replaceDB(db),
		Image:                   q.Image.replaceDB(db),
		Location:                q.Location.replaceDB(db),
		LocationImage:           q.LocationImage.replaceDB(db),
		News:                    q.News.replaceDB(db),
		NewsletterParticipation: q.NewsletterParticipation.replaceDB(db),
		PushToken:               q.PushToken.replaceDB(db),
		Registration:            q.Registration.replaceDB(db),
		ServerConfig:            q.ServerConfig.replaceDB(db),
		Todo:                    q.Todo.replaceDB(db),
		Trainer:                 q.Trainer.replaceDB(db),
		Training:                q.Training.replaceDB(db),
		TrainingDay:             q.TrainingDay.replaceDB(db),
		TrainingTrainer:         q.TrainingTrainer.replaceDB(db),
		User:                    q.User.replaceDB(db),
		UserCredit:              q.UserCredit.replaceDB(db),
		UserEvent:               q.UserEvent.replaceDB(db),
		UserTraining:            q.UserTraining.replaceDB(db),
		UserTrainingInternal:    q.UserTrainingInternal.replaceDB(db),
	}
}

type queryCtx struct {
	AuthenticationToken     *authenticationTokenDo
	ClientConfig            *clientConfigDo
	Credit                  *creditDo
	Event                   *eventDo
	Feedback                *feedbackDo
	Holiday                 *holidayDo
	Image                   *imageDo
	Location                *locationDo
	LocationImage           *locationImageDo
	News                    *newsDo
	NewsletterParticipation *newsletterParticipationDo
	PushToken               *pushTokenDo
	Registration            *registrationDo
	ServerConfig            *serverConfigDo
	Todo                    *todoDo
	Trainer                 *trainerDo
	Training                *trainingDo
	TrainingDay             *trainingDayDo
	TrainingTrainer         *trainingTrainerDo
	User                    *userDo
	UserCredit              *userCreditDo
	UserEvent               *userEventDo
	UserTraining            *userTrainingDo
	UserTrainingInternal    *userTrainingInternalDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AuthenticationToken:     q.AuthenticationToken.WithContext(ctx),
		ClientConfig:            q.ClientConfig.WithContext(ctx),
		Credit:                  q.Credit.WithContext(ctx),
		Event:                   q.Event.WithContext(ctx),
		Feedback:                q.Feedback.WithContext(ctx),
		Holiday:                 q.Holiday.WithContext(ctx),
		Image:                   q.Image.WithContext(ctx),
		Location:                q.Location.WithContext(ctx),
		LocationImage:           q.LocationImage.WithContext(ctx),
		News:                    q.News.WithContext(ctx),
		NewsletterParticipation: q.NewsletterParticipation.WithContext(ctx),
		PushToken:               q.PushToken.WithContext(ctx),
		Registration:            q.Registration.WithContext(ctx),
		ServerConfig:            q.ServerConfig.WithContext(ctx),
		Todo:                    q.Todo.WithContext(ctx),
		Trainer:                 q.Trainer.WithContext(ctx),
		Training:                q.Training.WithContext(ctx),
		TrainingDay:             q.TrainingDay.WithContext(ctx),
		TrainingTrainer:         q.TrainingTrainer.WithContext(ctx),
		User:                    q.User.WithContext(ctx),
		UserCredit:              q.UserCredit.WithContext(ctx),
		UserEvent:               q.UserEvent.WithContext(ctx),
		UserTraining:            q.UserTraining.WithContext(ctx),
		UserTrainingInternal:    q.UserTrainingInternal.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
