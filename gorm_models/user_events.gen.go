// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserEvent(db *gorm.DB, opts ...gen.DOOption) userEvent {
	_userEvent := userEvent{}

	_userEvent.userEventDo.UseDB(db, opts...)
	_userEvent.userEventDo.UseModel(&model.UserEvent{})

	tableName := _userEvent.userEventDo.TableName()
	_userEvent.ALL = field.NewAsterisk(tableName)
	_userEvent.Name = field.NewString(tableName, "name")
	_userEvent.Shortdescription = field.NewString(tableName, "shortdescription")
	_userEvent.ID = field.NewInt64(tableName, "id")
	_userEvent.Text = field.NewString(tableName, "text")
	_userEvent.Createdat = field.NewTime(tableName, "createdat")
	_userEvent.Updatedat = field.NewTime(tableName, "updatedat")
	_userEvent.UserID = field.NewInt64(tableName, "user_id")
	_userEvent.EventID = field.NewInt64(tableName, "event_id")

	_userEvent.fillFieldMap()

	return _userEvent
}

type userEvent struct {
	userEventDo userEventDo

	ALL              field.Asterisk
	Name             field.String
	Shortdescription field.String
	ID               field.Int64
	Text             field.String
	Createdat        field.Time
	Updatedat        field.Time
	UserID           field.Int64
	EventID          field.Int64

	fieldMap map[string]field.Expr
}

func (u userEvent) Table(newTableName string) *userEvent {
	u.userEventDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEvent) As(alias string) *userEvent {
	u.userEventDo.DO = *(u.userEventDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEvent) updateTableName(table string) *userEvent {
	u.ALL = field.NewAsterisk(table)
	u.Name = field.NewString(table, "name")
	u.Shortdescription = field.NewString(table, "shortdescription")
	u.ID = field.NewInt64(table, "id")
	u.Text = field.NewString(table, "text")
	u.Createdat = field.NewTime(table, "createdat")
	u.Updatedat = field.NewTime(table, "updatedat")
	u.UserID = field.NewInt64(table, "user_id")
	u.EventID = field.NewInt64(table, "event_id")

	u.fillFieldMap()

	return u
}

func (u *userEvent) WithContext(ctx context.Context) *userEventDo {
	return u.userEventDo.WithContext(ctx)
}

func (u userEvent) TableName() string { return u.userEventDo.TableName() }

func (u userEvent) Alias() string { return u.userEventDo.Alias() }

func (u *userEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEvent) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["name"] = u.Name
	u.fieldMap["shortdescription"] = u.Shortdescription
	u.fieldMap["id"] = u.ID
	u.fieldMap["text"] = u.Text
	u.fieldMap["createdat"] = u.Createdat
	u.fieldMap["updatedat"] = u.Updatedat
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["event_id"] = u.EventID
}

func (u userEvent) clone(db *gorm.DB) userEvent {
	u.userEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEvent) replaceDB(db *gorm.DB) userEvent {
	u.userEventDo.ReplaceDB(db)
	return u
}

type userEventDo struct{ gen.DO }

func (u userEventDo) Debug() *userEventDo {
	return u.withDO(u.DO.Debug())
}

func (u userEventDo) WithContext(ctx context.Context) *userEventDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEventDo) ReadDB() *userEventDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEventDo) WriteDB() *userEventDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEventDo) Session(config *gorm.Session) *userEventDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEventDo) Clauses(conds ...clause.Expression) *userEventDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEventDo) Returning(value interface{}, columns ...string) *userEventDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEventDo) Not(conds ...gen.Condition) *userEventDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEventDo) Or(conds ...gen.Condition) *userEventDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEventDo) Select(conds ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEventDo) Where(conds ...gen.Condition) *userEventDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userEventDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userEventDo) Order(conds ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEventDo) Distinct(cols ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEventDo) Omit(cols ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEventDo) Join(table schema.Tabler, on ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userEventDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEventDo) RightJoin(table schema.Tabler, on ...field.Expr) *userEventDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEventDo) Group(cols ...field.Expr) *userEventDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEventDo) Having(conds ...gen.Condition) *userEventDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEventDo) Limit(limit int) *userEventDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEventDo) Offset(offset int) *userEventDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userEventDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEventDo) Unscoped() *userEventDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEventDo) Create(values ...*model.UserEvent) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEventDo) CreateInBatches(values []*model.UserEvent, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEventDo) Save(values ...*model.UserEvent) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEventDo) First() (*model.UserEvent, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEvent), nil
	}
}

func (u userEventDo) Take() (*model.UserEvent, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEvent), nil
	}
}

func (u userEventDo) Last() (*model.UserEvent, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEvent), nil
	}
}

func (u userEventDo) Find() ([]*model.UserEvent, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEvent), err
}

func (u userEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEvent, err error) {
	buf := make([]*model.UserEvent, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEventDo) FindInBatches(result *[]*model.UserEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEventDo) Attrs(attrs ...field.AssignExpr) *userEventDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEventDo) Assign(attrs ...field.AssignExpr) *userEventDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEventDo) Joins(fields ...field.RelationField) *userEventDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEventDo) Preload(fields ...field.RelationField) *userEventDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEventDo) FirstOrInit() (*model.UserEvent, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEvent), nil
	}
}

func (u userEventDo) FirstOrCreate() (*model.UserEvent, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEvent), nil
	}
}

func (u userEventDo) FindByPage(offset int, limit int) (result []*model.UserEvent, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEventDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEventDo) Delete(models ...*model.UserEvent) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEventDo) withDO(do gen.Dao) *userEventDo {
	u.DO = *do.(*gen.DO)
	return u
}
