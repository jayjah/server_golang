// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRegistration(db *gorm.DB, opts ...gen.DOOption) registration {
	_registration := registration{}

	_registration.registrationDo.UseDB(db, opts...)
	_registration.registrationDo.UseModel(&model.Registration{})

	tableName := _registration.registrationDo.TableName()
	_registration.ALL = field.NewAsterisk(tableName)
	_registration.ID = field.NewInt64(tableName, "id")
	_registration.Firstname = field.NewString(tableName, "firstname")
	_registration.Lastname = field.NewString(tableName, "lastname")
	_registration.Birthdate = field.NewTime(tableName, "birthdate")
	_registration.Email = field.NewString(tableName, "email")
	_registration.Verifytoken = field.NewString(tableName, "verifytoken")
	_registration.Password = field.NewString(tableName, "password")
	_registration.Activated = field.NewBool(tableName, "activated")
	_registration.Createdat = field.NewTime(tableName, "createdat")

	_registration.fillFieldMap()

	return _registration
}

type registration struct {
	registrationDo registrationDo

	ALL         field.Asterisk
	ID          field.Int64
	Firstname   field.String
	Lastname    field.String
	Birthdate   field.Time
	Email       field.String
	Verifytoken field.String
	Password    field.String
	Activated   field.Bool
	Createdat   field.Time

	fieldMap map[string]field.Expr
}

func (r registration) Table(newTableName string) *registration {
	r.registrationDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registration) As(alias string) *registration {
	r.registrationDo.DO = *(r.registrationDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registration) updateTableName(table string) *registration {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Firstname = field.NewString(table, "firstname")
	r.Lastname = field.NewString(table, "lastname")
	r.Birthdate = field.NewTime(table, "birthdate")
	r.Email = field.NewString(table, "email")
	r.Verifytoken = field.NewString(table, "verifytoken")
	r.Password = field.NewString(table, "password")
	r.Activated = field.NewBool(table, "activated")
	r.Createdat = field.NewTime(table, "createdat")

	r.fillFieldMap()

	return r
}

func (r *registration) WithContext(ctx context.Context) *registrationDo {
	return r.registrationDo.WithContext(ctx)
}

func (r registration) TableName() string { return r.registrationDo.TableName() }

func (r registration) Alias() string { return r.registrationDo.Alias() }

func (r *registration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registration) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["firstname"] = r.Firstname
	r.fieldMap["lastname"] = r.Lastname
	r.fieldMap["birthdate"] = r.Birthdate
	r.fieldMap["email"] = r.Email
	r.fieldMap["verifytoken"] = r.Verifytoken
	r.fieldMap["password"] = r.Password
	r.fieldMap["activated"] = r.Activated
	r.fieldMap["createdat"] = r.Createdat
}

func (r registration) clone(db *gorm.DB) registration {
	r.registrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registration) replaceDB(db *gorm.DB) registration {
	r.registrationDo.ReplaceDB(db)
	return r
}

type registrationDo struct{ gen.DO }

func (r registrationDo) Debug() *registrationDo {
	return r.withDO(r.DO.Debug())
}

func (r registrationDo) WithContext(ctx context.Context) *registrationDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registrationDo) ReadDB() *registrationDo {
	return r.Clauses(dbresolver.Read)
}

func (r registrationDo) WriteDB() *registrationDo {
	return r.Clauses(dbresolver.Write)
}

func (r registrationDo) Session(config *gorm.Session) *registrationDo {
	return r.withDO(r.DO.Session(config))
}

func (r registrationDo) Clauses(conds ...clause.Expression) *registrationDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registrationDo) Returning(value interface{}, columns ...string) *registrationDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registrationDo) Not(conds ...gen.Condition) *registrationDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registrationDo) Or(conds ...gen.Condition) *registrationDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registrationDo) Select(conds ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registrationDo) Where(conds ...gen.Condition) *registrationDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registrationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *registrationDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r registrationDo) Order(conds ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registrationDo) Distinct(cols ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registrationDo) Omit(cols ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registrationDo) Join(table schema.Tabler, on ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *registrationDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registrationDo) RightJoin(table schema.Tabler, on ...field.Expr) *registrationDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registrationDo) Group(cols ...field.Expr) *registrationDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registrationDo) Having(conds ...gen.Condition) *registrationDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registrationDo) Limit(limit int) *registrationDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registrationDo) Offset(offset int) *registrationDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *registrationDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registrationDo) Unscoped() *registrationDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registrationDo) Create(values ...*model.Registration) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registrationDo) CreateInBatches(values []*model.Registration, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registrationDo) Save(values ...*model.Registration) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registrationDo) First() (*model.Registration, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Take() (*model.Registration, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Last() (*model.Registration, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Find() ([]*model.Registration, error) {
	result, err := r.DO.Find()
	return result.([]*model.Registration), err
}

func (r registrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Registration, err error) {
	buf := make([]*model.Registration, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registrationDo) FindInBatches(result *[]*model.Registration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registrationDo) Attrs(attrs ...field.AssignExpr) *registrationDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registrationDo) Assign(attrs ...field.AssignExpr) *registrationDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registrationDo) Joins(fields ...field.RelationField) *registrationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registrationDo) Preload(fields ...field.RelationField) *registrationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registrationDo) FirstOrInit() (*model.Registration, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) FirstOrCreate() (*model.Registration, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) FindByPage(offset int, limit int) (result []*model.Registration, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registrationDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registrationDo) Delete(models ...*model.Registration) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registrationDo) withDO(do gen.Dao) *registrationDo {
	r.DO = *do.(*gen.DO)
	return r
}
