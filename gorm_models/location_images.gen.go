// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLocationImage(db *gorm.DB, opts ...gen.DOOption) locationImage {
	_locationImage := locationImage{}

	_locationImage.locationImageDo.UseDB(db, opts...)
	_locationImage.locationImageDo.UseModel(&model.LocationImage{})

	tableName := _locationImage.locationImageDo.TableName()
	_locationImage.ALL = field.NewAsterisk(tableName)
	_locationImage.ID = field.NewInt64(tableName, "id")
	_locationImage.LocationID = field.NewInt64(tableName, "location_id")
	_locationImage.ImageID = field.NewInt64(tableName, "image_id")

	_locationImage.fillFieldMap()

	return _locationImage
}

type locationImage struct {
	locationImageDo locationImageDo

	ALL        field.Asterisk
	ID         field.Int64
	LocationID field.Int64
	ImageID    field.Int64

	fieldMap map[string]field.Expr
}

func (l locationImage) Table(newTableName string) *locationImage {
	l.locationImageDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l locationImage) As(alias string) *locationImage {
	l.locationImageDo.DO = *(l.locationImageDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *locationImage) updateTableName(table string) *locationImage {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.LocationID = field.NewInt64(table, "location_id")
	l.ImageID = field.NewInt64(table, "image_id")

	l.fillFieldMap()

	return l
}

func (l *locationImage) WithContext(ctx context.Context) *locationImageDo {
	return l.locationImageDo.WithContext(ctx)
}

func (l locationImage) TableName() string { return l.locationImageDo.TableName() }

func (l locationImage) Alias() string { return l.locationImageDo.Alias() }

func (l *locationImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *locationImage) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["location_id"] = l.LocationID
	l.fieldMap["image_id"] = l.ImageID
}

func (l locationImage) clone(db *gorm.DB) locationImage {
	l.locationImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l locationImage) replaceDB(db *gorm.DB) locationImage {
	l.locationImageDo.ReplaceDB(db)
	return l
}

type locationImageDo struct{ gen.DO }

func (l locationImageDo) Debug() *locationImageDo {
	return l.withDO(l.DO.Debug())
}

func (l locationImageDo) WithContext(ctx context.Context) *locationImageDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l locationImageDo) ReadDB() *locationImageDo {
	return l.Clauses(dbresolver.Read)
}

func (l locationImageDo) WriteDB() *locationImageDo {
	return l.Clauses(dbresolver.Write)
}

func (l locationImageDo) Session(config *gorm.Session) *locationImageDo {
	return l.withDO(l.DO.Session(config))
}

func (l locationImageDo) Clauses(conds ...clause.Expression) *locationImageDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l locationImageDo) Returning(value interface{}, columns ...string) *locationImageDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l locationImageDo) Not(conds ...gen.Condition) *locationImageDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l locationImageDo) Or(conds ...gen.Condition) *locationImageDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l locationImageDo) Select(conds ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l locationImageDo) Where(conds ...gen.Condition) *locationImageDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l locationImageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *locationImageDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l locationImageDo) Order(conds ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l locationImageDo) Distinct(cols ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l locationImageDo) Omit(cols ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l locationImageDo) Join(table schema.Tabler, on ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l locationImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l locationImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l locationImageDo) Group(cols ...field.Expr) *locationImageDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l locationImageDo) Having(conds ...gen.Condition) *locationImageDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l locationImageDo) Limit(limit int) *locationImageDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l locationImageDo) Offset(offset int) *locationImageDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l locationImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *locationImageDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l locationImageDo) Unscoped() *locationImageDo {
	return l.withDO(l.DO.Unscoped())
}

func (l locationImageDo) Create(values ...*model.LocationImage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l locationImageDo) CreateInBatches(values []*model.LocationImage, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l locationImageDo) Save(values ...*model.LocationImage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l locationImageDo) First() (*model.LocationImage, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationImage), nil
	}
}

func (l locationImageDo) Take() (*model.LocationImage, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationImage), nil
	}
}

func (l locationImageDo) Last() (*model.LocationImage, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationImage), nil
	}
}

func (l locationImageDo) Find() ([]*model.LocationImage, error) {
	result, err := l.DO.Find()
	return result.([]*model.LocationImage), err
}

func (l locationImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LocationImage, err error) {
	buf := make([]*model.LocationImage, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l locationImageDo) FindInBatches(result *[]*model.LocationImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l locationImageDo) Attrs(attrs ...field.AssignExpr) *locationImageDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l locationImageDo) Assign(attrs ...field.AssignExpr) *locationImageDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l locationImageDo) Joins(fields ...field.RelationField) *locationImageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l locationImageDo) Preload(fields ...field.RelationField) *locationImageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l locationImageDo) FirstOrInit() (*model.LocationImage, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationImage), nil
	}
}

func (l locationImageDo) FirstOrCreate() (*model.LocationImage, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationImage), nil
	}
}

func (l locationImageDo) FindByPage(offset int, limit int) (result []*model.LocationImage, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l locationImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l locationImageDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l locationImageDo) Delete(models ...*model.LocationImage) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *locationImageDo) withDO(do gen.Dao) *locationImageDo {
	l.DO = *do.(*gen.DO)
	return l
}
