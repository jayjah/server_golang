// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newClientConfig(db *gorm.DB, opts ...gen.DOOption) clientConfig {
	_clientConfig := clientConfig{}

	_clientConfig.clientConfigDo.UseDB(db, opts...)
	_clientConfig.clientConfigDo.UseModel(&model.ClientConfig{})

	tableName := _clientConfig.clientConfigDo.TableName()
	_clientConfig.ALL = field.NewAsterisk(tableName)
	_clientConfig._ID = field.NewInt64(tableName, "_id")
	_clientConfig.ID = field.NewString(tableName, "id")
	_clientConfig.Minversion = field.NewString(tableName, "minversion")
	_clientConfig.Newsenabled = field.NewInt32(tableName, "newsenabled")
	_clientConfig.Registrationenabled = field.NewInt32(tableName, "registrationenabled")
	_clientConfig.Eventsenabled = field.NewInt32(tableName, "eventsenabled")
	_clientConfig.Locationsenabled = field.NewInt32(tableName, "locationsenabled")
	_clientConfig.Trainersenabled = field.NewInt32(tableName, "trainersenabled")
	_clientConfig.Name = field.NewString(tableName, "name")
	_clientConfig.Imprintpath = field.NewString(tableName, "imprintpath")
	_clientConfig.Aboutuspath = field.NewString(tableName, "aboutuspath")
	_clientConfig.Defaultyoutubeid = field.NewString(tableName, "defaultyoutubeid")
	_clientConfig.Gmapapikey = field.NewString(tableName, "gmapapikey")
	_clientConfig.Newsperpage = field.NewInt32(tableName, "newsperpage")
	_clientConfig.Eventsperpage = field.NewInt32(tableName, "eventsperpage")

	_clientConfig.fillFieldMap()

	return _clientConfig
}

type clientConfig struct {
	clientConfigDo clientConfigDo

	ALL                 field.Asterisk
	_ID                  field.Int64
	ID                  field.String
	Minversion          field.String
	Newsenabled         field.Int32
	Registrationenabled field.Int32
	Eventsenabled       field.Int32
	Locationsenabled    field.Int32
	Trainersenabled     field.Int32
	Name                field.String
	Imprintpath         field.String
	Aboutuspath         field.String
	Defaultyoutubeid    field.String
	Gmapapikey          field.String
	Newsperpage         field.Int32
	Eventsperpage       field.Int32

	fieldMap map[string]field.Expr
}

func (c clientConfig) Table(newTableName string) *clientConfig {
	c.clientConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clientConfig) As(alias string) *clientConfig {
	c.clientConfigDo.DO = *(c.clientConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clientConfig) updateTableName(table string) *clientConfig {
	c.ALL = field.NewAsterisk(table)
	c._ID = field.NewInt64(table, "_id")
	c.ID = field.NewString(table, "id")
	c.Minversion = field.NewString(table, "minversion")
	c.Newsenabled = field.NewInt32(table, "newsenabled")
	c.Registrationenabled = field.NewInt32(table, "registrationenabled")
	c.Eventsenabled = field.NewInt32(table, "eventsenabled")
	c.Locationsenabled = field.NewInt32(table, "locationsenabled")
	c.Trainersenabled = field.NewInt32(table, "trainersenabled")
	c.Name = field.NewString(table, "name")
	c.Imprintpath = field.NewString(table, "imprintpath")
	c.Aboutuspath = field.NewString(table, "aboutuspath")
	c.Defaultyoutubeid = field.NewString(table, "defaultyoutubeid")
	c.Gmapapikey = field.NewString(table, "gmapapikey")
	c.Newsperpage = field.NewInt32(table, "newsperpage")
	c.Eventsperpage = field.NewInt32(table, "eventsperpage")

	c.fillFieldMap()

	return c
}

func (c *clientConfig) WithContext(ctx context.Context) *clientConfigDo {
	return c.clientConfigDo.WithContext(ctx)
}

func (c clientConfig) TableName() string { return c.clientConfigDo.TableName() }

func (c clientConfig) Alias() string { return c.clientConfigDo.Alias() }

func (c *clientConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clientConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["_id"] = c.ID
	c.fieldMap["id"] = c.ID
	c.fieldMap["minversion"] = c.Minversion
	c.fieldMap["newsenabled"] = c.Newsenabled
	c.fieldMap["registrationenabled"] = c.Registrationenabled
	c.fieldMap["eventsenabled"] = c.Eventsenabled
	c.fieldMap["locationsenabled"] = c.Locationsenabled
	c.fieldMap["trainersenabled"] = c.Trainersenabled
	c.fieldMap["name"] = c.Name
	c.fieldMap["imprintpath"] = c.Imprintpath
	c.fieldMap["aboutuspath"] = c.Aboutuspath
	c.fieldMap["defaultyoutubeid"] = c.Defaultyoutubeid
	c.fieldMap["gmapapikey"] = c.Gmapapikey
	c.fieldMap["newsperpage"] = c.Newsperpage
	c.fieldMap["eventsperpage"] = c.Eventsperpage
}

func (c clientConfig) clone(db *gorm.DB) clientConfig {
	c.clientConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clientConfig) replaceDB(db *gorm.DB) clientConfig {
	c.clientConfigDo.ReplaceDB(db)
	return c
}

type clientConfigDo struct{ gen.DO }

func (c clientConfigDo) Debug() *clientConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c clientConfigDo) WithContext(ctx context.Context) *clientConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clientConfigDo) ReadDB() *clientConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c clientConfigDo) WriteDB() *clientConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c clientConfigDo) Session(config *gorm.Session) *clientConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c clientConfigDo) Clauses(conds ...clause.Expression) *clientConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clientConfigDo) Returning(value interface{}, columns ...string) *clientConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clientConfigDo) Not(conds ...gen.Condition) *clientConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clientConfigDo) Or(conds ...gen.Condition) *clientConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clientConfigDo) Select(conds ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clientConfigDo) Where(conds ...gen.Condition) *clientConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clientConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *clientConfigDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clientConfigDo) Order(conds ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clientConfigDo) Distinct(cols ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clientConfigDo) Omit(cols ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clientConfigDo) Join(table schema.Tabler, on ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clientConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clientConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clientConfigDo) Group(cols ...field.Expr) *clientConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clientConfigDo) Having(conds ...gen.Condition) *clientConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clientConfigDo) Limit(limit int) *clientConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clientConfigDo) Offset(offset int) *clientConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clientConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *clientConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clientConfigDo) Unscoped() *clientConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clientConfigDo) Create(values ...*model.ClientConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clientConfigDo) CreateInBatches(values []*model.ClientConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clientConfigDo) Save(values ...*model.ClientConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clientConfigDo) First() (*model.ClientConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClientConfig), nil
	}
}

func (c clientConfigDo) Take() (*model.ClientConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClientConfig), nil
	}
}

func (c clientConfigDo) Last() (*model.ClientConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClientConfig), nil
	}
}

func (c clientConfigDo) Find() ([]*model.ClientConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClientConfig), err
}

func (c clientConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClientConfig, err error) {
	buf := make([]*model.ClientConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clientConfigDo) FindInBatches(result *[]*model.ClientConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clientConfigDo) Attrs(attrs ...field.AssignExpr) *clientConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clientConfigDo) Assign(attrs ...field.AssignExpr) *clientConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clientConfigDo) Joins(fields ...field.RelationField) *clientConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clientConfigDo) Preload(fields ...field.RelationField) *clientConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clientConfigDo) FirstOrInit() (*model.ClientConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClientConfig), nil
	}
}

func (c clientConfigDo) FirstOrCreate() (*model.ClientConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClientConfig), nil
	}
}

func (c clientConfigDo) FindByPage(offset int, limit int) (result []*model.ClientConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clientConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clientConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clientConfigDo) Delete(models ...*model.ClientConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clientConfigDo) withDO(do gen.Dao) *clientConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
