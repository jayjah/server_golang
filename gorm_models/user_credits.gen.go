// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserCredit(db *gorm.DB, opts ...gen.DOOption) userCredit {
	_userCredit := userCredit{}

	_userCredit.userCreditDo.UseDB(db, opts...)
	_userCredit.userCreditDo.UseModel(&model.UserCredit{})

	tableName := _userCredit.userCreditDo.TableName()
	_userCredit.ALL = field.NewAsterisk(tableName)
	_userCredit.ID = field.NewInt64(tableName, "id")
	_userCredit.Createdat = field.NewTime(tableName, "createdat")
	_userCredit.Updatedat = field.NewTime(tableName, "updatedat")
	_userCredit.UserID = field.NewInt64(tableName, "user_id")
	_userCredit.CreditID = field.NewInt64(tableName, "credit_id")

	_userCredit.fillFieldMap()

	return _userCredit
}

type userCredit struct {
	userCreditDo userCreditDo

	ALL       field.Asterisk
	ID        field.Int64
	Createdat field.Time
	Updatedat field.Time
	UserID    field.Int64
	CreditID  field.Int64

	fieldMap map[string]field.Expr
}

func (u userCredit) Table(newTableName string) *userCredit {
	u.userCreditDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCredit) As(alias string) *userCredit {
	u.userCreditDo.DO = *(u.userCreditDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCredit) updateTableName(table string) *userCredit {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Createdat = field.NewTime(table, "createdat")
	u.Updatedat = field.NewTime(table, "updatedat")
	u.UserID = field.NewInt64(table, "user_id")
	u.CreditID = field.NewInt64(table, "credit_id")

	u.fillFieldMap()

	return u
}

func (u *userCredit) WithContext(ctx context.Context) *userCreditDo {
	return u.userCreditDo.WithContext(ctx)
}

func (u userCredit) TableName() string { return u.userCreditDo.TableName() }

func (u userCredit) Alias() string { return u.userCreditDo.Alias() }

func (u *userCredit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCredit) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["createdat"] = u.Createdat
	u.fieldMap["updatedat"] = u.Updatedat
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["credit_id"] = u.CreditID
}

func (u userCredit) clone(db *gorm.DB) userCredit {
	u.userCreditDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCredit) replaceDB(db *gorm.DB) userCredit {
	u.userCreditDo.ReplaceDB(db)
	return u
}

type userCreditDo struct{ gen.DO }

func (u userCreditDo) Debug() *userCreditDo {
	return u.withDO(u.DO.Debug())
}

func (u userCreditDo) WithContext(ctx context.Context) *userCreditDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCreditDo) ReadDB() *userCreditDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCreditDo) WriteDB() *userCreditDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCreditDo) Session(config *gorm.Session) *userCreditDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCreditDo) Clauses(conds ...clause.Expression) *userCreditDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCreditDo) Returning(value interface{}, columns ...string) *userCreditDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCreditDo) Not(conds ...gen.Condition) *userCreditDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCreditDo) Or(conds ...gen.Condition) *userCreditDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCreditDo) Select(conds ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCreditDo) Where(conds ...gen.Condition) *userCreditDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCreditDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userCreditDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userCreditDo) Order(conds ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCreditDo) Distinct(cols ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCreditDo) Omit(cols ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCreditDo) Join(table schema.Tabler, on ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCreditDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCreditDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCreditDo) Group(cols ...field.Expr) *userCreditDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCreditDo) Having(conds ...gen.Condition) *userCreditDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCreditDo) Limit(limit int) *userCreditDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCreditDo) Offset(offset int) *userCreditDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCreditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCreditDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCreditDo) Unscoped() *userCreditDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCreditDo) Create(values ...*model.UserCredit) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCreditDo) CreateInBatches(values []*model.UserCredit, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCreditDo) Save(values ...*model.UserCredit) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCreditDo) First() (*model.UserCredit, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredit), nil
	}
}

func (u userCreditDo) Take() (*model.UserCredit, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredit), nil
	}
}

func (u userCreditDo) Last() (*model.UserCredit, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredit), nil
	}
}

func (u userCreditDo) Find() ([]*model.UserCredit, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCredit), err
}

func (u userCreditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCredit, err error) {
	buf := make([]*model.UserCredit, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCreditDo) FindInBatches(result *[]*model.UserCredit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCreditDo) Attrs(attrs ...field.AssignExpr) *userCreditDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCreditDo) Assign(attrs ...field.AssignExpr) *userCreditDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCreditDo) Joins(fields ...field.RelationField) *userCreditDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCreditDo) Preload(fields ...field.RelationField) *userCreditDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCreditDo) FirstOrInit() (*model.UserCredit, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredit), nil
	}
}

func (u userCreditDo) FirstOrCreate() (*model.UserCredit, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredit), nil
	}
}

func (u userCreditDo) FindByPage(offset int, limit int) (result []*model.UserCredit, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCreditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCreditDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCreditDo) Delete(models ...*model.UserCredit) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCreditDo) withDO(do gen.Dao) *userCreditDo {
	u.DO = *do.(*gen.DO)
	return u
}
