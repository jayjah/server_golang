// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPushToken(db *gorm.DB, opts ...gen.DOOption) pushToken {
	_pushToken := pushToken{}

	_pushToken.pushTokenDo.UseDB(db, opts...)
	_pushToken.pushTokenDo.UseModel(&model.PushToken{})

	tableName := _pushToken.pushTokenDo.TableName()
	_pushToken.ALL = field.NewAsterisk(tableName)
	_pushToken.ID = field.NewInt64(tableName, "id")
	_pushToken.Token = field.NewString(tableName, "token")
	_pushToken.Hms = field.NewBool(tableName, "hms")
	_pushToken.Apn = field.NewBool(tableName, "apn")
	_pushToken.Fcm = field.NewBool(tableName, "fcm")

	_pushToken.fillFieldMap()

	return _pushToken
}

type pushToken struct {
	pushTokenDo pushTokenDo

	ALL   field.Asterisk
	ID    field.Int64
	Token field.String
	Hms   field.Bool
	Apn   field.Bool
	Fcm   field.Bool

	fieldMap map[string]field.Expr
}

func (p pushToken) Table(newTableName string) *pushToken {
	p.pushTokenDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pushToken) As(alias string) *pushToken {
	p.pushTokenDo.DO = *(p.pushTokenDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pushToken) updateTableName(table string) *pushToken {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Token = field.NewString(table, "token")
	p.Hms = field.NewBool(table, "hms")
	p.Apn = field.NewBool(table, "apn")
	p.Fcm = field.NewBool(table, "fcm")

	p.fillFieldMap()

	return p
}

func (p *pushToken) WithContext(ctx context.Context) *pushTokenDo {
	return p.pushTokenDo.WithContext(ctx)
}

func (p pushToken) TableName() string { return p.pushTokenDo.TableName() }

func (p pushToken) Alias() string { return p.pushTokenDo.Alias() }

func (p *pushToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pushToken) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["token"] = p.Token
	p.fieldMap["hms"] = p.Hms
	p.fieldMap["apn"] = p.Apn
	p.fieldMap["fcm"] = p.Fcm
}

func (p pushToken) clone(db *gorm.DB) pushToken {
	p.pushTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pushToken) replaceDB(db *gorm.DB) pushToken {
	p.pushTokenDo.ReplaceDB(db)
	return p
}

type pushTokenDo struct{ gen.DO }

func (p pushTokenDo) Debug() *pushTokenDo {
	return p.withDO(p.DO.Debug())
}

func (p pushTokenDo) WithContext(ctx context.Context) *pushTokenDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pushTokenDo) ReadDB() *pushTokenDo {
	return p.Clauses(dbresolver.Read)
}

func (p pushTokenDo) WriteDB() *pushTokenDo {
	return p.Clauses(dbresolver.Write)
}

func (p pushTokenDo) Session(config *gorm.Session) *pushTokenDo {
	return p.withDO(p.DO.Session(config))
}

func (p pushTokenDo) Clauses(conds ...clause.Expression) *pushTokenDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pushTokenDo) Returning(value interface{}, columns ...string) *pushTokenDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pushTokenDo) Not(conds ...gen.Condition) *pushTokenDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pushTokenDo) Or(conds ...gen.Condition) *pushTokenDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pushTokenDo) Select(conds ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pushTokenDo) Where(conds ...gen.Condition) *pushTokenDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pushTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pushTokenDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pushTokenDo) Order(conds ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pushTokenDo) Distinct(cols ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pushTokenDo) Omit(cols ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pushTokenDo) Join(table schema.Tabler, on ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pushTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pushTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pushTokenDo) Group(cols ...field.Expr) *pushTokenDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pushTokenDo) Having(conds ...gen.Condition) *pushTokenDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pushTokenDo) Limit(limit int) *pushTokenDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pushTokenDo) Offset(offset int) *pushTokenDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pushTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pushTokenDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pushTokenDo) Unscoped() *pushTokenDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pushTokenDo) Create(values ...*model.PushToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pushTokenDo) CreateInBatches(values []*model.PushToken, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pushTokenDo) Save(values ...*model.PushToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pushTokenDo) First() (*model.PushToken, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushToken), nil
	}
}

func (p pushTokenDo) Take() (*model.PushToken, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushToken), nil
	}
}

func (p pushTokenDo) Last() (*model.PushToken, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushToken), nil
	}
}

func (p pushTokenDo) Find() ([]*model.PushToken, error) {
	result, err := p.DO.Find()
	return result.([]*model.PushToken), err
}

func (p pushTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PushToken, err error) {
	buf := make([]*model.PushToken, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pushTokenDo) FindInBatches(result *[]*model.PushToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pushTokenDo) Attrs(attrs ...field.AssignExpr) *pushTokenDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pushTokenDo) Assign(attrs ...field.AssignExpr) *pushTokenDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pushTokenDo) Joins(fields ...field.RelationField) *pushTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pushTokenDo) Preload(fields ...field.RelationField) *pushTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pushTokenDo) FirstOrInit() (*model.PushToken, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushToken), nil
	}
}

func (p pushTokenDo) FirstOrCreate() (*model.PushToken, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushToken), nil
	}
}

func (p pushTokenDo) FindByPage(offset int, limit int) (result []*model.PushToken, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pushTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pushTokenDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pushTokenDo) Delete(models ...*model.PushToken) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pushTokenDo) withDO(do gen.Dao) *pushTokenDo {
	p.DO = *do.(*gen.DO)
	return p
}
