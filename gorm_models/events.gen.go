// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newEvent(db *gorm.DB, opts ...gen.DOOption) event {
	_event := event{}

	_event.eventDo.UseDB(db, opts...)
	_event.eventDo.UseModel(&model.Event{})

	tableName := _event.eventDo.TableName()
	_event.ALL = field.NewAsterisk(tableName)
	_event.Youtubeurl = field.NewString(tableName, "youtubeurl")
	_event.Startdate = field.NewTime(tableName, "startdate")
	_event.Enddate = field.NewTime(tableName, "enddate")
	_event.Homepagelink = field.NewString(tableName, "homepagelink")
	_event.Homepagelinkname = field.NewString(tableName, "homepagelinkname")
	_event.Wordpressid = field.NewString(tableName, "wordpressid")
	_event.ID = field.NewInt64(tableName, "id")
	_event.Name = field.NewString(tableName, "name")
	_event.Shortdescription = field.NewString(tableName, "shortdescription")
	_event.Text = field.NewString(tableName, "text")
	_event.Createdat = field.NewTime(tableName, "createdat")
	_event.Updatedat = field.NewTime(tableName, "updatedat")
	_event.ImageID = field.NewInt64(tableName, "image_id")

	_event.fillFieldMap()

	return _event
}

type event struct {
	eventDo eventDo

	ALL              field.Asterisk
	Youtubeurl       field.String
	Startdate        field.Time
	Enddate          field.Time
	Homepagelink     field.String
	Homepagelinkname field.String
	Wordpressid      field.String
	ID               field.Int64
	Name             field.String
	Shortdescription field.String
	Text             field.String
	Createdat        field.Time
	Updatedat        field.Time
	ImageID          field.Int64

	fieldMap map[string]field.Expr
}

func (e event) Table(newTableName string) *event {
	e.eventDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e event) As(alias string) *event {
	e.eventDo.DO = *(e.eventDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *event) updateTableName(table string) *event {
	e.ALL = field.NewAsterisk(table)
	e.Youtubeurl = field.NewString(table, "youtubeurl")
	e.Startdate = field.NewTime(table, "startdate")
	e.Enddate = field.NewTime(table, "enddate")
	e.Homepagelink = field.NewString(table, "homepagelink")
	e.Homepagelinkname = field.NewString(table, "homepagelinkname")
	e.Wordpressid = field.NewString(table, "wordpressid")
	e.ID = field.NewInt64(table, "id")
	e.Name = field.NewString(table, "name")
	e.Shortdescription = field.NewString(table, "shortdescription")
	e.Text = field.NewString(table, "text")
	e.Createdat = field.NewTime(table, "createdat")
	e.Updatedat = field.NewTime(table, "updatedat")
	e.ImageID = field.NewInt64(table, "image_id")

	e.fillFieldMap()

	return e
}

func (e *event) WithContext(ctx context.Context) *eventDo { return e.eventDo.WithContext(ctx) }

func (e event) TableName() string { return e.eventDo.TableName() }

func (e event) Alias() string { return e.eventDo.Alias() }

func (e *event) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *event) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["youtubeurl"] = e.Youtubeurl
	e.fieldMap["startdate"] = e.Startdate
	e.fieldMap["enddate"] = e.Enddate
	e.fieldMap["homepagelink"] = e.Homepagelink
	e.fieldMap["homepagelinkname"] = e.Homepagelinkname
	e.fieldMap["wordpressid"] = e.Wordpressid
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["shortdescription"] = e.Shortdescription
	e.fieldMap["text"] = e.Text
	e.fieldMap["createdat"] = e.Createdat
	e.fieldMap["updatedat"] = e.Updatedat
	e.fieldMap["image_id"] = e.ImageID
}

func (e event) clone(db *gorm.DB) event {
	e.eventDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e event) replaceDB(db *gorm.DB) event {
	e.eventDo.ReplaceDB(db)
	return e
}

type eventDo struct{ gen.DO }

func (e eventDo) Debug() *eventDo {
	return e.withDO(e.DO.Debug())
}

func (e eventDo) WithContext(ctx context.Context) *eventDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventDo) ReadDB() *eventDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventDo) WriteDB() *eventDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventDo) Session(config *gorm.Session) *eventDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventDo) Clauses(conds ...clause.Expression) *eventDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventDo) Returning(value interface{}, columns ...string) *eventDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventDo) Not(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventDo) Or(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventDo) Select(conds ...field.Expr) *eventDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventDo) Where(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *eventDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eventDo) Order(conds ...field.Expr) *eventDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventDo) Distinct(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventDo) Omit(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventDo) Join(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventDo) RightJoin(table schema.Tabler, on ...field.Expr) *eventDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventDo) Group(cols ...field.Expr) *eventDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventDo) Having(conds ...gen.Condition) *eventDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventDo) Limit(limit int) *eventDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventDo) Offset(offset int) *eventDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eventDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventDo) Unscoped() *eventDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventDo) Create(values ...*model.Event) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventDo) CreateInBatches(values []*model.Event, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventDo) Save(values ...*model.Event) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventDo) First() (*model.Event, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Take() (*model.Event, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Last() (*model.Event, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) Find() ([]*model.Event, error) {
	result, err := e.DO.Find()
	return result.([]*model.Event), err
}

func (e eventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Event, err error) {
	buf := make([]*model.Event, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventDo) FindInBatches(result *[]*model.Event, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventDo) Attrs(attrs ...field.AssignExpr) *eventDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventDo) Assign(attrs ...field.AssignExpr) *eventDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventDo) Joins(fields ...field.RelationField) *eventDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventDo) Preload(fields ...field.RelationField) *eventDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventDo) FirstOrInit() (*model.Event, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) FirstOrCreate() (*model.Event, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Event), nil
	}
}

func (e eventDo) FindByPage(offset int, limit int) (result []*model.Event, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventDo) Delete(models ...*model.Event) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventDo) withDO(do gen.Dao) *eventDo {
	e.DO = *do.(*gen.DO)
	return e
}
