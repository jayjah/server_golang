// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newNewsletterParticipation(db *gorm.DB, opts ...gen.DOOption) newsletterParticipation {
	_newsletterParticipation := newsletterParticipation{}

	_newsletterParticipation.newsletterParticipationDo.UseDB(db, opts...)
	_newsletterParticipation.newsletterParticipationDo.UseModel(&model.NewsletterParticipation{})

	tableName := _newsletterParticipation.newsletterParticipationDo.TableName()
	_newsletterParticipation.ALL = field.NewAsterisk(tableName)
	_newsletterParticipation.ID = field.NewInt64(tableName, "id")
	_newsletterParticipation.Email = field.NewString(tableName, "email")
	_newsletterParticipation.Verifytoken = field.NewString(tableName, "verifytoken")
	_newsletterParticipation.Firstname = field.NewString(tableName, "firstname")
	_newsletterParticipation.Lastname = field.NewString(tableName, "lastname")
	_newsletterParticipation.Activated = field.NewBool(tableName, "activated")
	_newsletterParticipation.Createdat = field.NewTime(tableName, "createdat")

	_newsletterParticipation.fillFieldMap()

	return _newsletterParticipation
}

type newsletterParticipation struct {
	newsletterParticipationDo newsletterParticipationDo

	ALL         field.Asterisk
	ID          field.Int64
	Email       field.String
	Verifytoken field.String
	Firstname   field.String
	Lastname    field.String
	Activated   field.Bool
	Createdat   field.Time

	fieldMap map[string]field.Expr
}

func (n newsletterParticipation) Table(newTableName string) *newsletterParticipation {
	n.newsletterParticipationDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n newsletterParticipation) As(alias string) *newsletterParticipation {
	n.newsletterParticipationDo.DO = *(n.newsletterParticipationDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *newsletterParticipation) updateTableName(table string) *newsletterParticipation {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.Email = field.NewString(table, "email")
	n.Verifytoken = field.NewString(table, "verifytoken")
	n.Firstname = field.NewString(table, "firstname")
	n.Lastname = field.NewString(table, "lastname")
	n.Activated = field.NewBool(table, "activated")
	n.Createdat = field.NewTime(table, "createdat")

	n.fillFieldMap()

	return n
}

func (n *newsletterParticipation) WithContext(ctx context.Context) *newsletterParticipationDo {
	return n.newsletterParticipationDo.WithContext(ctx)
}

func (n newsletterParticipation) TableName() string { return n.newsletterParticipationDo.TableName() }

func (n newsletterParticipation) Alias() string { return n.newsletterParticipationDo.Alias() }

func (n *newsletterParticipation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *newsletterParticipation) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["id"] = n.ID
	n.fieldMap["email"] = n.Email
	n.fieldMap["verifytoken"] = n.Verifytoken
	n.fieldMap["firstname"] = n.Firstname
	n.fieldMap["lastname"] = n.Lastname
	n.fieldMap["activated"] = n.Activated
	n.fieldMap["createdat"] = n.Createdat
}

func (n newsletterParticipation) clone(db *gorm.DB) newsletterParticipation {
	n.newsletterParticipationDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n newsletterParticipation) replaceDB(db *gorm.DB) newsletterParticipation {
	n.newsletterParticipationDo.ReplaceDB(db)
	return n
}

type newsletterParticipationDo struct{ gen.DO }

func (n newsletterParticipationDo) Debug() *newsletterParticipationDo {
	return n.withDO(n.DO.Debug())
}

func (n newsletterParticipationDo) WithContext(ctx context.Context) *newsletterParticipationDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newsletterParticipationDo) ReadDB() *newsletterParticipationDo {
	return n.Clauses(dbresolver.Read)
}

func (n newsletterParticipationDo) WriteDB() *newsletterParticipationDo {
	return n.Clauses(dbresolver.Write)
}

func (n newsletterParticipationDo) Session(config *gorm.Session) *newsletterParticipationDo {
	return n.withDO(n.DO.Session(config))
}

func (n newsletterParticipationDo) Clauses(conds ...clause.Expression) *newsletterParticipationDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newsletterParticipationDo) Returning(value interface{}, columns ...string) *newsletterParticipationDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newsletterParticipationDo) Not(conds ...gen.Condition) *newsletterParticipationDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newsletterParticipationDo) Or(conds ...gen.Condition) *newsletterParticipationDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newsletterParticipationDo) Select(conds ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newsletterParticipationDo) Where(conds ...gen.Condition) *newsletterParticipationDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newsletterParticipationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *newsletterParticipationDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n newsletterParticipationDo) Order(conds ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newsletterParticipationDo) Distinct(cols ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newsletterParticipationDo) Omit(cols ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newsletterParticipationDo) Join(table schema.Tabler, on ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newsletterParticipationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newsletterParticipationDo) RightJoin(table schema.Tabler, on ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newsletterParticipationDo) Group(cols ...field.Expr) *newsletterParticipationDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newsletterParticipationDo) Having(conds ...gen.Condition) *newsletterParticipationDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newsletterParticipationDo) Limit(limit int) *newsletterParticipationDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newsletterParticipationDo) Offset(offset int) *newsletterParticipationDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newsletterParticipationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *newsletterParticipationDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newsletterParticipationDo) Unscoped() *newsletterParticipationDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newsletterParticipationDo) Create(values ...*model.NewsletterParticipation) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newsletterParticipationDo) CreateInBatches(values []*model.NewsletterParticipation, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newsletterParticipationDo) Save(values ...*model.NewsletterParticipation) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newsletterParticipationDo) First() (*model.NewsletterParticipation, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsletterParticipation), nil
	}
}

func (n newsletterParticipationDo) Take() (*model.NewsletterParticipation, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsletterParticipation), nil
	}
}

func (n newsletterParticipationDo) Last() (*model.NewsletterParticipation, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsletterParticipation), nil
	}
}

func (n newsletterParticipationDo) Find() ([]*model.NewsletterParticipation, error) {
	result, err := n.DO.Find()
	return result.([]*model.NewsletterParticipation), err
}

func (n newsletterParticipationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsletterParticipation, err error) {
	buf := make([]*model.NewsletterParticipation, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newsletterParticipationDo) FindInBatches(result *[]*model.NewsletterParticipation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newsletterParticipationDo) Attrs(attrs ...field.AssignExpr) *newsletterParticipationDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newsletterParticipationDo) Assign(attrs ...field.AssignExpr) *newsletterParticipationDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newsletterParticipationDo) Joins(fields ...field.RelationField) *newsletterParticipationDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newsletterParticipationDo) Preload(fields ...field.RelationField) *newsletterParticipationDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newsletterParticipationDo) FirstOrInit() (*model.NewsletterParticipation, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsletterParticipation), nil
	}
}

func (n newsletterParticipationDo) FirstOrCreate() (*model.NewsletterParticipation, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsletterParticipation), nil
	}
}

func (n newsletterParticipationDo) FindByPage(offset int, limit int) (result []*model.NewsletterParticipation, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newsletterParticipationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newsletterParticipationDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newsletterParticipationDo) Delete(models ...*model.NewsletterParticipation) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newsletterParticipationDo) withDO(do gen.Dao) *newsletterParticipationDo {
	n.DO = *do.(*gen.DO)
	return n
}
