// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_models

import (
	"context"
	"golang_server/gorm_models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTrainer(db *gorm.DB, opts ...gen.DOOption) trainer {
	_trainer := trainer{}

	_trainer.trainerDo.UseDB(db, opts...)
	_trainer.trainerDo.UseModel(&model.Trainer{})

	tableName := _trainer.trainerDo.TableName()
	_trainer.ALL = field.NewAsterisk(tableName)
	_trainer.Agelabel = field.NewString(tableName, "agelabel")
	_trainer.ID = field.NewInt64(tableName, "id")
	_trainer.Name = field.NewString(tableName, "name")
	_trainer.Shortdescription = field.NewString(tableName, "shortdescription")
	_trainer.Text = field.NewString(tableName, "text")
	_trainer.Createdat = field.NewTime(tableName, "createdat")
	_trainer.Updatedat = field.NewTime(tableName, "updatedat")
	_trainer.ImageID = field.NewInt64(tableName, "image_id")
	_trainer.UserID = field.NewInt64(tableName, "user_id")

	_trainer.fillFieldMap()

	return _trainer
}

type trainer struct {
	trainerDo trainerDo

	ALL              field.Asterisk
	Agelabel         field.String
	ID               field.Int64
	Name             field.String
	Shortdescription field.String
	Text             field.String
	Createdat        field.Time
	Updatedat        field.Time
	ImageID          field.Int64
	UserID           field.Int64

	fieldMap map[string]field.Expr
}

func (t trainer) Table(newTableName string) *trainer {
	t.trainerDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainer) As(alias string) *trainer {
	t.trainerDo.DO = *(t.trainerDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainer) updateTableName(table string) *trainer {
	t.ALL = field.NewAsterisk(table)
	t.Agelabel = field.NewString(table, "agelabel")
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Shortdescription = field.NewString(table, "shortdescription")
	t.Text = field.NewString(table, "text")
	t.Createdat = field.NewTime(table, "createdat")
	t.Updatedat = field.NewTime(table, "updatedat")
	t.ImageID = field.NewInt64(table, "image_id")
	t.UserID = field.NewInt64(table, "user_id")

	t.fillFieldMap()

	return t
}

func (t *trainer) WithContext(ctx context.Context) *trainerDo { return t.trainerDo.WithContext(ctx) }

func (t trainer) TableName() string { return t.trainerDo.TableName() }

func (t trainer) Alias() string { return t.trainerDo.Alias() }

func (t *trainer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["agelabel"] = t.Agelabel
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["shortdescription"] = t.Shortdescription
	t.fieldMap["text"] = t.Text
	t.fieldMap["createdat"] = t.Createdat
	t.fieldMap["updatedat"] = t.Updatedat
	t.fieldMap["image_id"] = t.ImageID
	t.fieldMap["user_id"] = t.UserID
}

func (t trainer) clone(db *gorm.DB) trainer {
	t.trainerDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainer) replaceDB(db *gorm.DB) trainer {
	t.trainerDo.ReplaceDB(db)
	return t
}

type trainerDo struct{ gen.DO }

func (t trainerDo) Debug() *trainerDo {
	return t.withDO(t.DO.Debug())
}

func (t trainerDo) WithContext(ctx context.Context) *trainerDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainerDo) ReadDB() *trainerDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainerDo) WriteDB() *trainerDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainerDo) Session(config *gorm.Session) *trainerDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainerDo) Clauses(conds ...clause.Expression) *trainerDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainerDo) Returning(value interface{}, columns ...string) *trainerDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainerDo) Not(conds ...gen.Condition) *trainerDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainerDo) Or(conds ...gen.Condition) *trainerDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainerDo) Select(conds ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainerDo) Where(conds ...gen.Condition) *trainerDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *trainerDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t trainerDo) Order(conds ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainerDo) Distinct(cols ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainerDo) Omit(cols ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainerDo) Join(table schema.Tabler, on ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *trainerDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainerDo) RightJoin(table schema.Tabler, on ...field.Expr) *trainerDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainerDo) Group(cols ...field.Expr) *trainerDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainerDo) Having(conds ...gen.Condition) *trainerDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainerDo) Limit(limit int) *trainerDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainerDo) Offset(offset int) *trainerDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *trainerDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainerDo) Unscoped() *trainerDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainerDo) Create(values ...*model.Trainer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainerDo) CreateInBatches(values []*model.Trainer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainerDo) Save(values ...*model.Trainer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainerDo) First() (*model.Trainer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Trainer), nil
	}
}

func (t trainerDo) Take() (*model.Trainer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Trainer), nil
	}
}

func (t trainerDo) Last() (*model.Trainer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Trainer), nil
	}
}

func (t trainerDo) Find() ([]*model.Trainer, error) {
	result, err := t.DO.Find()
	return result.([]*model.Trainer), err
}

func (t trainerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Trainer, err error) {
	buf := make([]*model.Trainer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainerDo) FindInBatches(result *[]*model.Trainer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainerDo) Attrs(attrs ...field.AssignExpr) *trainerDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainerDo) Assign(attrs ...field.AssignExpr) *trainerDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainerDo) Joins(fields ...field.RelationField) *trainerDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainerDo) Preload(fields ...field.RelationField) *trainerDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainerDo) FirstOrInit() (*model.Trainer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Trainer), nil
	}
}

func (t trainerDo) FirstOrCreate() (*model.Trainer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Trainer), nil
	}
}

func (t trainerDo) FindByPage(offset int, limit int) (result []*model.Trainer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainerDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainerDo) Delete(models ...*model.Trainer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainerDo) withDO(do gen.Dao) *trainerDo {
	t.DO = *do.(*gen.DO)
	return t
}
