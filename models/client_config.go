// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClientConfig is an object representing the database table.
type ClientConfig struct {
	_ID                  int64  `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	ID                  string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Minversion          string `boil:"minversion" json:"minversion" toml:"minversion" yaml:"minversion"`
	Newsenabled         int    `boil:"newsenabled" json:"newsenabled" toml:"newsenabled" yaml:"newsenabled"`
	Registrationenabled int    `boil:"registrationenabled" json:"registrationenabled" toml:"registrationenabled" yaml:"registrationenabled"`
	Eventsenabled       int    `boil:"eventsenabled" json:"eventsenabled" toml:"eventsenabled" yaml:"eventsenabled"`
	Locationsenabled    int    `boil:"locationsenabled" json:"locationsenabled" toml:"locationsenabled" yaml:"locationsenabled"`
	Trainersenabled     int    `boil:"trainersenabled" json:"trainersenabled" toml:"trainersenabled" yaml:"trainersenabled"`
	Name                string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Imprintpath         string `boil:"imprintpath" json:"imprintpath" toml:"imprintpath" yaml:"imprintpath"`
	Aboutuspath         string `boil:"aboutuspath" json:"aboutuspath" toml:"aboutuspath" yaml:"aboutuspath"`
	Defaultyoutubeid    string `boil:"defaultyoutubeid" json:"defaultyoutubeid" toml:"defaultyoutubeid" yaml:"defaultyoutubeid"`
	Gmapapikey          string `boil:"gmapapikey" json:"gmapapikey" toml:"gmapapikey" yaml:"gmapapikey"`
	Newsperpage         int    `boil:"newsperpage" json:"newsperpage" toml:"newsperpage" yaml:"newsperpage"`
	Eventsperpage       int    `boil:"eventsperpage" json:"eventsperpage" toml:"eventsperpage" yaml:"eventsperpage"`

	R *clientConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientConfigColumns = struct {
	_ID                  string
	ID                  string
	Minversion          string
	Newsenabled         string
	Registrationenabled string
	Eventsenabled       string
	Locationsenabled    string
	Trainersenabled     string
	Name                string
	Imprintpath         string
	Aboutuspath         string
	Defaultyoutubeid    string
	Gmapapikey          string
	Newsperpage         string
	Eventsperpage       string
}{
	_ID:                  "_id",
	ID:                  "id",
	Minversion:          "minversion",
	Newsenabled:         "newsenabled",
	Registrationenabled: "registrationenabled",
	Eventsenabled:       "eventsenabled",
	Locationsenabled:    "locationsenabled",
	Trainersenabled:     "trainersenabled",
	Name:                "name",
	Imprintpath:         "imprintpath",
	Aboutuspath:         "aboutuspath",
	Defaultyoutubeid:    "defaultyoutubeid",
	Gmapapikey:          "gmapapikey",
	Newsperpage:         "newsperpage",
	Eventsperpage:       "eventsperpage",
}

var ClientConfigTableColumns = struct {
	_ID                  string
	ID                  string
	Minversion          string
	Newsenabled         string
	Registrationenabled string
	Eventsenabled       string
	Locationsenabled    string
	Trainersenabled     string
	Name                string
	Imprintpath         string
	Aboutuspath         string
	Defaultyoutubeid    string
	Gmapapikey          string
	Newsperpage         string
	Eventsperpage       string
}{
	_ID:                  "client_config._id",
	ID:                  "client_config.id",
	Minversion:          "client_config.minversion",
	Newsenabled:         "client_config.newsenabled",
	Registrationenabled: "client_config.registrationenabled",
	Eventsenabled:       "client_config.eventsenabled",
	Locationsenabled:    "client_config.locationsenabled",
	Trainersenabled:     "client_config.trainersenabled",
	Name:                "client_config.name",
	Imprintpath:         "client_config.imprintpath",
	Aboutuspath:         "client_config.aboutuspath",
	Defaultyoutubeid:    "client_config.defaultyoutubeid",
	Gmapapikey:          "client_config.gmapapikey",
	Newsperpage:         "client_config.newsperpage",
	Eventsperpage:       "client_config.eventsperpage",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ClientConfigWhere = struct {
	_ID                  whereHelperint64
	ID                  whereHelperstring
	Minversion          whereHelperstring
	Newsenabled         whereHelperint
	Registrationenabled whereHelperint
	Eventsenabled       whereHelperint
	Locationsenabled    whereHelperint
	Trainersenabled     whereHelperint
	Name                whereHelperstring
	Imprintpath         whereHelperstring
	Aboutuspath         whereHelperstring
	Defaultyoutubeid    whereHelperstring
	Gmapapikey          whereHelperstring
	Newsperpage         whereHelperint
	Eventsperpage       whereHelperint
}{
	_ID:                  whereHelperint64{field: "\"client_config\".\"_id\""},
	ID:                  whereHelperstring{field: "\"client_config\".\"id\""},
	Minversion:          whereHelperstring{field: "\"client_config\".\"minversion\""},
	Newsenabled:         whereHelperint{field: "\"client_config\".\"newsenabled\""},
	Registrationenabled: whereHelperint{field: "\"client_config\".\"registrationenabled\""},
	Eventsenabled:       whereHelperint{field: "\"client_config\".\"eventsenabled\""},
	Locationsenabled:    whereHelperint{field: "\"client_config\".\"locationsenabled\""},
	Trainersenabled:     whereHelperint{field: "\"client_config\".\"trainersenabled\""},
	Name:                whereHelperstring{field: "\"client_config\".\"name\""},
	Imprintpath:         whereHelperstring{field: "\"client_config\".\"imprintpath\""},
	Aboutuspath:         whereHelperstring{field: "\"client_config\".\"aboutuspath\""},
	Defaultyoutubeid:    whereHelperstring{field: "\"client_config\".\"defaultyoutubeid\""},
	Gmapapikey:          whereHelperstring{field: "\"client_config\".\"gmapapikey\""},
	Newsperpage:         whereHelperint{field: "\"client_config\".\"newsperpage\""},
	Eventsperpage:       whereHelperint{field: "\"client_config\".\"eventsperpage\""},
}

// ClientConfigRels is where relationship names are stored.
var ClientConfigRels = struct {
}{}

// clientConfigR is where relationships are stored.
type clientConfigR struct {
}

// NewStruct creates a new relationship struct
func (*clientConfigR) NewStruct() *clientConfigR {
	return &clientConfigR{}
}

// clientConfigL is where Load methods for each relationship are stored.
type clientConfigL struct{}

var (
	clientConfigAllColumns            = []string{"_id", "id", "minversion", "newsenabled", "registrationenabled", "eventsenabled", "locationsenabled", "trainersenabled", "name", "imprintpath", "aboutuspath", "defaultyoutubeid", "gmapapikey", "newsperpage", "eventsperpage"}
	clientConfigColumnsWithoutDefault = []string{"id"}
	clientConfigColumnsWithDefault    = []string{"_id", "minversion", "newsenabled", "registrationenabled", "eventsenabled", "locationsenabled", "trainersenabled", "name", "imprintpath", "aboutuspath", "defaultyoutubeid", "gmapapikey", "newsperpage", "eventsperpage"}
	clientConfigPrimaryKeyColumns     = []string{"_id"}
	clientConfigGeneratedColumns      = []string{}
)

type (
	// ClientConfigSlice is an alias for a slice of pointers to ClientConfig.
	// This should almost always be used instead of []ClientConfig.
	ClientConfigSlice []*ClientConfig
	// ClientConfigHook is the signature for custom ClientConfig hook methods
	ClientConfigHook func(context.Context, boil.ContextExecutor, *ClientConfig) error

	clientConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientConfigType                 = reflect.TypeOf(&ClientConfig{})
	clientConfigMapping              = queries.MakeStructMapping(clientConfigType)
	clientConfigPrimaryKeyMapping, _ = queries.BindMapping(clientConfigType, clientConfigMapping, clientConfigPrimaryKeyColumns)
	clientConfigInsertCacheMut       sync.RWMutex
	clientConfigInsertCache          = make(map[string]insertCache)
	clientConfigUpdateCacheMut       sync.RWMutex
	clientConfigUpdateCache          = make(map[string]updateCache)
	clientConfigUpsertCacheMut       sync.RWMutex
	clientConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientConfigAfterSelectHooks []ClientConfigHook

var clientConfigBeforeInsertHooks []ClientConfigHook
var clientConfigAfterInsertHooks []ClientConfigHook

var clientConfigBeforeUpdateHooks []ClientConfigHook
var clientConfigAfterUpdateHooks []ClientConfigHook

var clientConfigBeforeDeleteHooks []ClientConfigHook
var clientConfigAfterDeleteHooks []ClientConfigHook

var clientConfigBeforeUpsertHooks []ClientConfigHook
var clientConfigAfterUpsertHooks []ClientConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientConfigHook registers your hook function for all future operations.
func AddClientConfigHook(hookPoint boil.HookPoint, clientConfigHook ClientConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		clientConfigAfterSelectHooks = append(clientConfigAfterSelectHooks, clientConfigHook)
	case boil.BeforeInsertHook:
		clientConfigBeforeInsertHooks = append(clientConfigBeforeInsertHooks, clientConfigHook)
	case boil.AfterInsertHook:
		clientConfigAfterInsertHooks = append(clientConfigAfterInsertHooks, clientConfigHook)
	case boil.BeforeUpdateHook:
		clientConfigBeforeUpdateHooks = append(clientConfigBeforeUpdateHooks, clientConfigHook)
	case boil.AfterUpdateHook:
		clientConfigAfterUpdateHooks = append(clientConfigAfterUpdateHooks, clientConfigHook)
	case boil.BeforeDeleteHook:
		clientConfigBeforeDeleteHooks = append(clientConfigBeforeDeleteHooks, clientConfigHook)
	case boil.AfterDeleteHook:
		clientConfigAfterDeleteHooks = append(clientConfigAfterDeleteHooks, clientConfigHook)
	case boil.BeforeUpsertHook:
		clientConfigBeforeUpsertHooks = append(clientConfigBeforeUpsertHooks, clientConfigHook)
	case boil.AfterUpsertHook:
		clientConfigAfterUpsertHooks = append(clientConfigAfterUpsertHooks, clientConfigHook)
	}
}

// One returns a single clientConfig record from the query.
func (q clientConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientConfig, error) {
	o := &ClientConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for client_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientConfig records from the query.
func (q clientConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientConfigSlice, error) {
	var o []*ClientConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClientConfig slice")
	}

	if len(clientConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientConfig records in the query.
func (q clientConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count client_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if client_config exists")
	}

	return count > 0, nil
}

// ClientConfigs retrieves all the records using an executor.
func ClientConfigs(mods ...qm.QueryMod) clientConfigQuery {
	mods = append(mods, qm.From("\"client_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"client_config\".*"})
	}

	return clientConfigQuery{q}
}

// FindClientConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientConfig(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ClientConfig, error) {
	clientConfigObj := &ClientConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"client_config\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clientConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from client_config")
	}

	if err = clientConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clientConfigObj, err
	}

	return clientConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientConfigInsertCacheMut.RLock()
	cache, cached := clientConfigInsertCache[key]
	clientConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientConfigAllColumns,
			clientConfigColumnsWithDefault,
			clientConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientConfigType, clientConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientConfigType, clientConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"client_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"client_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into client_config")
	}

	if !cached {
		clientConfigInsertCacheMut.Lock()
		clientConfigInsertCache[key] = cache
		clientConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientConfigUpdateCacheMut.RLock()
	cache, cached := clientConfigUpdateCache[key]
	clientConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientConfigAllColumns,
			clientConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update client_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"client_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, clientConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientConfigType, clientConfigMapping, append(wl, clientConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update client_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for client_config")
	}

	if !cached {
		clientConfigUpdateCacheMut.Lock()
		clientConfigUpdateCache[key] = cache
		clientConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for client_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for client_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"client_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clientConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clientConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clientConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClientConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientConfigUpsertCacheMut.RLock()
	cache, cached := clientConfigUpsertCache[key]
	clientConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clientConfigAllColumns,
			clientConfigColumnsWithDefault,
			clientConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clientConfigAllColumns,
			clientConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert client_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(clientConfigPrimaryKeyColumns))
			copy(conflict, clientConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"client_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(clientConfigType, clientConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientConfigType, clientConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert client_config")
	}

	if !cached {
		clientConfigUpsertCacheMut.Lock()
		clientConfigUpsertCache[key] = cache
		clientConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClientConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"client_config\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from client_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for client_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clientConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from client_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clientConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"client_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clientConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_config")
	}

	if len(clientConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientConfig(ctx, exec, o._ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"client_config\".* FROM \"client_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientConfigSlice")
	}

	*o = slice

	return nil
}

// ClientConfigExists checks if the ClientConfig row exists.
func ClientConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"client_config\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if client_config exists")
	}

	return exists, nil
}

// Exists checks if the ClientConfig row exists.
func (o *ClientConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClientConfigExists(ctx, exec, o._ID)
}
