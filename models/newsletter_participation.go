// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NewsletterParticipation is an object representing the database table.
type NewsletterParticipation struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email       string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Verifytoken string    `boil:"verifytoken" json:"verifytoken" toml:"verifytoken" yaml:"verifytoken"`
	Firstname   string    `boil:"firstname" json:"firstname" toml:"firstname" yaml:"firstname"`
	Lastname    string    `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Activated   bool      `boil:"activated" json:"activated" toml:"activated" yaml:"activated"`
	Createdat   time.Time `boil:"createdat" json:"createdat" toml:"createdat" yaml:"createdat"`

	R *newsletterParticipationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L newsletterParticipationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NewsletterParticipationColumns = struct {
	ID          string
	Email       string
	Verifytoken string
	Firstname   string
	Lastname    string
	Activated   string
	Createdat   string
}{
	ID:          "id",
	Email:       "email",
	Verifytoken: "verifytoken",
	Firstname:   "firstname",
	Lastname:    "lastname",
	Activated:   "activated",
	Createdat:   "createdat",
}

var NewsletterParticipationTableColumns = struct {
	ID          string
	Email       string
	Verifytoken string
	Firstname   string
	Lastname    string
	Activated   string
	Createdat   string
}{
	ID:          "newsletter_participation.id",
	Email:       "newsletter_participation.email",
	Verifytoken: "newsletter_participation.verifytoken",
	Firstname:   "newsletter_participation.firstname",
	Lastname:    "newsletter_participation.lastname",
	Activated:   "newsletter_participation.activated",
	Createdat:   "newsletter_participation.createdat",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var NewsletterParticipationWhere = struct {
	ID          whereHelperint64
	Email       whereHelperstring
	Verifytoken whereHelperstring
	Firstname   whereHelperstring
	Lastname    whereHelperstring
	Activated   whereHelperbool
	Createdat   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"newsletter_participation\".\"id\""},
	Email:       whereHelperstring{field: "\"newsletter_participation\".\"email\""},
	Verifytoken: whereHelperstring{field: "\"newsletter_participation\".\"verifytoken\""},
	Firstname:   whereHelperstring{field: "\"newsletter_participation\".\"firstname\""},
	Lastname:    whereHelperstring{field: "\"newsletter_participation\".\"lastname\""},
	Activated:   whereHelperbool{field: "\"newsletter_participation\".\"activated\""},
	Createdat:   whereHelpertime_Time{field: "\"newsletter_participation\".\"createdat\""},
}

// NewsletterParticipationRels is where relationship names are stored.
var NewsletterParticipationRels = struct {
}{}

// newsletterParticipationR is where relationships are stored.
type newsletterParticipationR struct {
}

// NewStruct creates a new relationship struct
func (*newsletterParticipationR) NewStruct() *newsletterParticipationR {
	return &newsletterParticipationR{}
}

// newsletterParticipationL is where Load methods for each relationship are stored.
type newsletterParticipationL struct{}

var (
	newsletterParticipationAllColumns            = []string{"id", "email", "verifytoken", "firstname", "lastname", "activated", "createdat"}
	newsletterParticipationColumnsWithoutDefault = []string{"email", "verifytoken", "firstname", "lastname"}
	newsletterParticipationColumnsWithDefault    = []string{"id", "activated", "createdat"}
	newsletterParticipationPrimaryKeyColumns     = []string{"id"}
	newsletterParticipationGeneratedColumns      = []string{}
)

type (
	// NewsletterParticipationSlice is an alias for a slice of pointers to NewsletterParticipation.
	// This should almost always be used instead of []NewsletterParticipation.
	NewsletterParticipationSlice []*NewsletterParticipation
	// NewsletterParticipationHook is the signature for custom NewsletterParticipation hook methods
	NewsletterParticipationHook func(context.Context, boil.ContextExecutor, *NewsletterParticipation) error

	newsletterParticipationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	newsletterParticipationType                 = reflect.TypeOf(&NewsletterParticipation{})
	newsletterParticipationMapping              = queries.MakeStructMapping(newsletterParticipationType)
	newsletterParticipationPrimaryKeyMapping, _ = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, newsletterParticipationPrimaryKeyColumns)
	newsletterParticipationInsertCacheMut       sync.RWMutex
	newsletterParticipationInsertCache          = make(map[string]insertCache)
	newsletterParticipationUpdateCacheMut       sync.RWMutex
	newsletterParticipationUpdateCache          = make(map[string]updateCache)
	newsletterParticipationUpsertCacheMut       sync.RWMutex
	newsletterParticipationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var newsletterParticipationAfterSelectHooks []NewsletterParticipationHook

var newsletterParticipationBeforeInsertHooks []NewsletterParticipationHook
var newsletterParticipationAfterInsertHooks []NewsletterParticipationHook

var newsletterParticipationBeforeUpdateHooks []NewsletterParticipationHook
var newsletterParticipationAfterUpdateHooks []NewsletterParticipationHook

var newsletterParticipationBeforeDeleteHooks []NewsletterParticipationHook
var newsletterParticipationAfterDeleteHooks []NewsletterParticipationHook

var newsletterParticipationBeforeUpsertHooks []NewsletterParticipationHook
var newsletterParticipationAfterUpsertHooks []NewsletterParticipationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NewsletterParticipation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NewsletterParticipation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NewsletterParticipation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NewsletterParticipation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NewsletterParticipation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NewsletterParticipation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NewsletterParticipation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NewsletterParticipation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NewsletterParticipation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsletterParticipationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNewsletterParticipationHook registers your hook function for all future operations.
func AddNewsletterParticipationHook(hookPoint boil.HookPoint, newsletterParticipationHook NewsletterParticipationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		newsletterParticipationAfterSelectHooks = append(newsletterParticipationAfterSelectHooks, newsletterParticipationHook)
	case boil.BeforeInsertHook:
		newsletterParticipationBeforeInsertHooks = append(newsletterParticipationBeforeInsertHooks, newsletterParticipationHook)
	case boil.AfterInsertHook:
		newsletterParticipationAfterInsertHooks = append(newsletterParticipationAfterInsertHooks, newsletterParticipationHook)
	case boil.BeforeUpdateHook:
		newsletterParticipationBeforeUpdateHooks = append(newsletterParticipationBeforeUpdateHooks, newsletterParticipationHook)
	case boil.AfterUpdateHook:
		newsletterParticipationAfterUpdateHooks = append(newsletterParticipationAfterUpdateHooks, newsletterParticipationHook)
	case boil.BeforeDeleteHook:
		newsletterParticipationBeforeDeleteHooks = append(newsletterParticipationBeforeDeleteHooks, newsletterParticipationHook)
	case boil.AfterDeleteHook:
		newsletterParticipationAfterDeleteHooks = append(newsletterParticipationAfterDeleteHooks, newsletterParticipationHook)
	case boil.BeforeUpsertHook:
		newsletterParticipationBeforeUpsertHooks = append(newsletterParticipationBeforeUpsertHooks, newsletterParticipationHook)
	case boil.AfterUpsertHook:
		newsletterParticipationAfterUpsertHooks = append(newsletterParticipationAfterUpsertHooks, newsletterParticipationHook)
	}
}

// One returns a single newsletterParticipation record from the query.
func (q newsletterParticipationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NewsletterParticipation, error) {
	o := &NewsletterParticipation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for newsletter_participation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NewsletterParticipation records from the query.
func (q newsletterParticipationQuery) All(ctx context.Context, exec boil.ContextExecutor) (NewsletterParticipationSlice, error) {
	var o []*NewsletterParticipation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NewsletterParticipation slice")
	}

	if len(newsletterParticipationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NewsletterParticipation records in the query.
func (q newsletterParticipationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count newsletter_participation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q newsletterParticipationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if newsletter_participation exists")
	}

	return count > 0, nil
}

// NewsletterParticipations retrieves all the records using an executor.
func NewsletterParticipations(mods ...qm.QueryMod) newsletterParticipationQuery {
	mods = append(mods, qm.From("\"newsletter_participation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"newsletter_participation\".*"})
	}

	return newsletterParticipationQuery{q}
}

// FindNewsletterParticipation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNewsletterParticipation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NewsletterParticipation, error) {
	newsletterParticipationObj := &NewsletterParticipation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"newsletter_participation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, newsletterParticipationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from newsletter_participation")
	}

	if err = newsletterParticipationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return newsletterParticipationObj, err
	}

	return newsletterParticipationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NewsletterParticipation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no newsletter_participation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newsletterParticipationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	newsletterParticipationInsertCacheMut.RLock()
	cache, cached := newsletterParticipationInsertCache[key]
	newsletterParticipationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			newsletterParticipationAllColumns,
			newsletterParticipationColumnsWithDefault,
			newsletterParticipationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"newsletter_participation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"newsletter_participation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into newsletter_participation")
	}

	if !cached {
		newsletterParticipationInsertCacheMut.Lock()
		newsletterParticipationInsertCache[key] = cache
		newsletterParticipationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NewsletterParticipation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NewsletterParticipation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	newsletterParticipationUpdateCacheMut.RLock()
	cache, cached := newsletterParticipationUpdateCache[key]
	newsletterParticipationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			newsletterParticipationAllColumns,
			newsletterParticipationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update newsletter_participation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"newsletter_participation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, newsletterParticipationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, append(wl, newsletterParticipationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update newsletter_participation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for newsletter_participation")
	}

	if !cached {
		newsletterParticipationUpdateCacheMut.Lock()
		newsletterParticipationUpdateCache[key] = cache
		newsletterParticipationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q newsletterParticipationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for newsletter_participation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for newsletter_participation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NewsletterParticipationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsletterParticipationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"newsletter_participation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, newsletterParticipationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in newsletterParticipation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all newsletterParticipation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NewsletterParticipation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no newsletter_participation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newsletterParticipationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	newsletterParticipationUpsertCacheMut.RLock()
	cache, cached := newsletterParticipationUpsertCache[key]
	newsletterParticipationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			newsletterParticipationAllColumns,
			newsletterParticipationColumnsWithDefault,
			newsletterParticipationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			newsletterParticipationAllColumns,
			newsletterParticipationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert newsletter_participation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(newsletterParticipationPrimaryKeyColumns))
			copy(conflict, newsletterParticipationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"newsletter_participation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(newsletterParticipationType, newsletterParticipationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert newsletter_participation")
	}

	if !cached {
		newsletterParticipationUpsertCacheMut.Lock()
		newsletterParticipationUpsertCache[key] = cache
		newsletterParticipationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NewsletterParticipation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NewsletterParticipation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NewsletterParticipation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), newsletterParticipationPrimaryKeyMapping)
	sql := "DELETE FROM \"newsletter_participation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from newsletter_participation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for newsletter_participation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q newsletterParticipationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no newsletterParticipationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from newsletter_participation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for newsletter_participation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NewsletterParticipationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(newsletterParticipationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsletterParticipationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"newsletter_participation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newsletterParticipationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from newsletterParticipation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for newsletter_participation")
	}

	if len(newsletterParticipationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NewsletterParticipation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNewsletterParticipation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NewsletterParticipationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NewsletterParticipationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsletterParticipationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"newsletter_participation\".* FROM \"newsletter_participation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newsletterParticipationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NewsletterParticipationSlice")
	}

	*o = slice

	return nil
}

// NewsletterParticipationExists checks if the NewsletterParticipation row exists.
func NewsletterParticipationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"newsletter_participation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if newsletter_participation exists")
	}

	return exists, nil
}

// Exists checks if the NewsletterParticipation row exists.
func (o *NewsletterParticipation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NewsletterParticipationExists(ctx, exec, o.ID)
}
