// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserTrainingInternal is an object representing the database table.
type UserTrainingInternal struct {
	ID         int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Counter    int   `boil:"counter" json:"counter" toml:"counter" yaml:"counter"`
	UserID     int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TrainingID int64 `boil:"training_id" json:"training_id" toml:"training_id" yaml:"training_id"`

	R *userTrainingInternalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTrainingInternalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTrainingInternalColumns = struct {
	ID         string
	Counter    string
	UserID     string
	TrainingID string
}{
	ID:         "id",
	Counter:    "counter",
	UserID:     "user_id",
	TrainingID: "training_id",
}

var UserTrainingInternalTableColumns = struct {
	ID         string
	Counter    string
	UserID     string
	TrainingID string
}{
	ID:         "user_training_internal.id",
	Counter:    "user_training_internal.counter",
	UserID:     "user_training_internal.user_id",
	TrainingID: "user_training_internal.training_id",
}

// Generated where

var UserTrainingInternalWhere = struct {
	ID         whereHelperint64
	Counter    whereHelperint
	UserID     whereHelperint64
	TrainingID whereHelperint64
}{
	ID:         whereHelperint64{field: "\"user_training_internal\".\"id\""},
	Counter:    whereHelperint{field: "\"user_training_internal\".\"counter\""},
	UserID:     whereHelperint64{field: "\"user_training_internal\".\"user_id\""},
	TrainingID: whereHelperint64{field: "\"user_training_internal\".\"training_id\""},
}

// UserTrainingInternalRels is where relationship names are stored.
var UserTrainingInternalRels = struct {
	Training string
	User     string
}{
	Training: "Training",
	User:     "User",
}

// userTrainingInternalR is where relationships are stored.
type userTrainingInternalR struct {
	Training *Training `boil:"Training" json:"Training" toml:"Training" yaml:"Training"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userTrainingInternalR) NewStruct() *userTrainingInternalR {
	return &userTrainingInternalR{}
}

func (r *userTrainingInternalR) GetTraining() *Training {
	if r == nil {
		return nil
	}
	return r.Training
}

func (r *userTrainingInternalR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userTrainingInternalL is where Load methods for each relationship are stored.
type userTrainingInternalL struct{}

var (
	userTrainingInternalAllColumns            = []string{"id", "counter", "user_id", "training_id"}
	userTrainingInternalColumnsWithoutDefault = []string{"user_id", "training_id"}
	userTrainingInternalColumnsWithDefault    = []string{"id", "counter"}
	userTrainingInternalPrimaryKeyColumns     = []string{"id"}
	userTrainingInternalGeneratedColumns      = []string{}
)

type (
	// UserTrainingInternalSlice is an alias for a slice of pointers to UserTrainingInternal.
	// This should almost always be used instead of []UserTrainingInternal.
	UserTrainingInternalSlice []*UserTrainingInternal
	// UserTrainingInternalHook is the signature for custom UserTrainingInternal hook methods
	UserTrainingInternalHook func(context.Context, boil.ContextExecutor, *UserTrainingInternal) error

	userTrainingInternalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTrainingInternalType                 = reflect.TypeOf(&UserTrainingInternal{})
	userTrainingInternalMapping              = queries.MakeStructMapping(userTrainingInternalType)
	userTrainingInternalPrimaryKeyMapping, _ = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, userTrainingInternalPrimaryKeyColumns)
	userTrainingInternalInsertCacheMut       sync.RWMutex
	userTrainingInternalInsertCache          = make(map[string]insertCache)
	userTrainingInternalUpdateCacheMut       sync.RWMutex
	userTrainingInternalUpdateCache          = make(map[string]updateCache)
	userTrainingInternalUpsertCacheMut       sync.RWMutex
	userTrainingInternalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTrainingInternalAfterSelectHooks []UserTrainingInternalHook

var userTrainingInternalBeforeInsertHooks []UserTrainingInternalHook
var userTrainingInternalAfterInsertHooks []UserTrainingInternalHook

var userTrainingInternalBeforeUpdateHooks []UserTrainingInternalHook
var userTrainingInternalAfterUpdateHooks []UserTrainingInternalHook

var userTrainingInternalBeforeDeleteHooks []UserTrainingInternalHook
var userTrainingInternalAfterDeleteHooks []UserTrainingInternalHook

var userTrainingInternalBeforeUpsertHooks []UserTrainingInternalHook
var userTrainingInternalAfterUpsertHooks []UserTrainingInternalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTrainingInternal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTrainingInternal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTrainingInternal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTrainingInternal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTrainingInternal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTrainingInternal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTrainingInternal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTrainingInternal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTrainingInternal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingInternalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTrainingInternalHook registers your hook function for all future operations.
func AddUserTrainingInternalHook(hookPoint boil.HookPoint, userTrainingInternalHook UserTrainingInternalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTrainingInternalAfterSelectHooks = append(userTrainingInternalAfterSelectHooks, userTrainingInternalHook)
	case boil.BeforeInsertHook:
		userTrainingInternalBeforeInsertHooks = append(userTrainingInternalBeforeInsertHooks, userTrainingInternalHook)
	case boil.AfterInsertHook:
		userTrainingInternalAfterInsertHooks = append(userTrainingInternalAfterInsertHooks, userTrainingInternalHook)
	case boil.BeforeUpdateHook:
		userTrainingInternalBeforeUpdateHooks = append(userTrainingInternalBeforeUpdateHooks, userTrainingInternalHook)
	case boil.AfterUpdateHook:
		userTrainingInternalAfterUpdateHooks = append(userTrainingInternalAfterUpdateHooks, userTrainingInternalHook)
	case boil.BeforeDeleteHook:
		userTrainingInternalBeforeDeleteHooks = append(userTrainingInternalBeforeDeleteHooks, userTrainingInternalHook)
	case boil.AfterDeleteHook:
		userTrainingInternalAfterDeleteHooks = append(userTrainingInternalAfterDeleteHooks, userTrainingInternalHook)
	case boil.BeforeUpsertHook:
		userTrainingInternalBeforeUpsertHooks = append(userTrainingInternalBeforeUpsertHooks, userTrainingInternalHook)
	case boil.AfterUpsertHook:
		userTrainingInternalAfterUpsertHooks = append(userTrainingInternalAfterUpsertHooks, userTrainingInternalHook)
	}
}

// One returns a single userTrainingInternal record from the query.
func (q userTrainingInternalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserTrainingInternal, error) {
	o := &UserTrainingInternal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_training_internal")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTrainingInternal records from the query.
func (q userTrainingInternalQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserTrainingInternalSlice, error) {
	var o []*UserTrainingInternal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserTrainingInternal slice")
	}

	if len(userTrainingInternalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTrainingInternal records in the query.
func (q userTrainingInternalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_training_internal rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTrainingInternalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_training_internal exists")
	}

	return count > 0, nil
}

// Training pointed to by the foreign key.
func (o *UserTrainingInternal) Training(mods ...qm.QueryMod) trainingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrainingID),
	}

	queryMods = append(queryMods, mods...)

	return Trainings(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserTrainingInternal) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTraining allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTrainingInternalL) LoadTraining(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTrainingInternal interface{}, mods queries.Applicator) error {
	var slice []*UserTrainingInternal
	var object *UserTrainingInternal

	if singular {
		var ok bool
		object, ok = maybeUserTrainingInternal.(*UserTrainingInternal)
		if !ok {
			object = new(UserTrainingInternal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTrainingInternal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTrainingInternal))
			}
		}
	} else {
		s, ok := maybeUserTrainingInternal.(*[]*UserTrainingInternal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTrainingInternal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTrainingInternal))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTrainingInternalR{}
		}
		args = append(args, object.TrainingID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTrainingInternalR{}
			}

			for _, a := range args {
				if a == obj.TrainingID {
					continue Outer
				}
			}

			args = append(args, obj.TrainingID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trainings`),
		qm.WhereIn(`trainings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Training")
	}

	var resultSlice []*Training
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Training")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trainings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trainings")
	}

	if len(trainingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Training = foreign
		if foreign.R == nil {
			foreign.R = &trainingR{}
		}
		foreign.R.UserTrainingInternals = append(foreign.R.UserTrainingInternals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrainingID == foreign.ID {
				local.R.Training = foreign
				if foreign.R == nil {
					foreign.R = &trainingR{}
				}
				foreign.R.UserTrainingInternals = append(foreign.R.UserTrainingInternals, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTrainingInternalL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTrainingInternal interface{}, mods queries.Applicator) error {
	var slice []*UserTrainingInternal
	var object *UserTrainingInternal

	if singular {
		var ok bool
		object, ok = maybeUserTrainingInternal.(*UserTrainingInternal)
		if !ok {
			object = new(UserTrainingInternal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTrainingInternal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTrainingInternal))
			}
		}
	} else {
		s, ok := maybeUserTrainingInternal.(*[]*UserTrainingInternal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTrainingInternal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTrainingInternal))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTrainingInternalR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTrainingInternalR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTrainingInternals = append(foreign.R.UserTrainingInternals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTrainingInternals = append(foreign.R.UserTrainingInternals, local)
				break
			}
		}
	}

	return nil
}

// SetTraining of the userTrainingInternal to the related item.
// Sets o.R.Training to related.
// Adds o to related.R.UserTrainingInternals.
func (o *UserTrainingInternal) SetTraining(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Training) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_training_internal\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"training_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTrainingInternalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrainingID = related.ID
	if o.R == nil {
		o.R = &userTrainingInternalR{
			Training: related,
		}
	} else {
		o.R.Training = related
	}

	if related.R == nil {
		related.R = &trainingR{
			UserTrainingInternals: UserTrainingInternalSlice{o},
		}
	} else {
		related.R.UserTrainingInternals = append(related.R.UserTrainingInternals, o)
	}

	return nil
}

// SetUser of the userTrainingInternal to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTrainingInternals.
func (o *UserTrainingInternal) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_training_internal\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTrainingInternalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userTrainingInternalR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTrainingInternals: UserTrainingInternalSlice{o},
		}
	} else {
		related.R.UserTrainingInternals = append(related.R.UserTrainingInternals, o)
	}

	return nil
}

// UserTrainingInternals retrieves all the records using an executor.
func UserTrainingInternals(mods ...qm.QueryMod) userTrainingInternalQuery {
	mods = append(mods, qm.From("\"user_training_internal\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_training_internal\".*"})
	}

	return userTrainingInternalQuery{q}
}

// FindUserTrainingInternal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTrainingInternal(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserTrainingInternal, error) {
	userTrainingInternalObj := &UserTrainingInternal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_training_internal\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userTrainingInternalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_training_internal")
	}

	if err = userTrainingInternalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userTrainingInternalObj, err
	}

	return userTrainingInternalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTrainingInternal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_training_internal provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTrainingInternalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTrainingInternalInsertCacheMut.RLock()
	cache, cached := userTrainingInternalInsertCache[key]
	userTrainingInternalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTrainingInternalAllColumns,
			userTrainingInternalColumnsWithDefault,
			userTrainingInternalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_training_internal\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_training_internal\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_training_internal")
	}

	if !cached {
		userTrainingInternalInsertCacheMut.Lock()
		userTrainingInternalInsertCache[key] = cache
		userTrainingInternalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserTrainingInternal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTrainingInternal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTrainingInternalUpdateCacheMut.RLock()
	cache, cached := userTrainingInternalUpdateCache[key]
	userTrainingInternalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTrainingInternalAllColumns,
			userTrainingInternalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_training_internal, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_training_internal\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userTrainingInternalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, append(wl, userTrainingInternalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_training_internal row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_training_internal")
	}

	if !cached {
		userTrainingInternalUpdateCacheMut.Lock()
		userTrainingInternalUpdateCache[key] = cache
		userTrainingInternalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTrainingInternalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_training_internal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_training_internal")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTrainingInternalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingInternalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_training_internal\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userTrainingInternalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userTrainingInternal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userTrainingInternal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTrainingInternal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_training_internal provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTrainingInternalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTrainingInternalUpsertCacheMut.RLock()
	cache, cached := userTrainingInternalUpsertCache[key]
	userTrainingInternalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTrainingInternalAllColumns,
			userTrainingInternalColumnsWithDefault,
			userTrainingInternalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTrainingInternalAllColumns,
			userTrainingInternalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_training_internal, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userTrainingInternalPrimaryKeyColumns))
			copy(conflict, userTrainingInternalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_training_internal\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTrainingInternalType, userTrainingInternalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_training_internal")
	}

	if !cached {
		userTrainingInternalUpsertCacheMut.Lock()
		userTrainingInternalUpsertCache[key] = cache
		userTrainingInternalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserTrainingInternal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTrainingInternal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserTrainingInternal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTrainingInternalPrimaryKeyMapping)
	sql := "DELETE FROM \"user_training_internal\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_training_internal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_training_internal")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTrainingInternalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userTrainingInternalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_training_internal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_training_internal")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTrainingInternalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTrainingInternalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingInternalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_training_internal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTrainingInternalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userTrainingInternal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_training_internal")
	}

	if len(userTrainingInternalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTrainingInternal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserTrainingInternal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTrainingInternalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTrainingInternalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingInternalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_training_internal\".* FROM \"user_training_internal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTrainingInternalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserTrainingInternalSlice")
	}

	*o = slice

	return nil
}

// UserTrainingInternalExists checks if the UserTrainingInternal row exists.
func UserTrainingInternalExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_training_internal\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_training_internal exists")
	}

	return exists, nil
}

// Exists checks if the UserTrainingInternal row exists.
func (o *UserTrainingInternal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserTrainingInternalExists(ctx, exec, o.ID)
}
