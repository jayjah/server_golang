// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserTraining is an object representing the database table.
type UserTraining struct {
	ID                int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Validatedfromuser bool  `boil:"validatedfromuser" json:"validatedfromuser" toml:"validatedfromuser" yaml:"validatedfromuser"`
	UserID            int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TrainingdateID    int64 `boil:"trainingdate_id" json:"trainingdate_id" toml:"trainingdate_id" yaml:"trainingdate_id"`

	R *userTrainingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTrainingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTrainingColumns = struct {
	ID                string
	Validatedfromuser string
	UserID            string
	TrainingdateID    string
}{
	ID:                "id",
	Validatedfromuser: "validatedfromuser",
	UserID:            "user_id",
	TrainingdateID:    "trainingdate_id",
}

var UserTrainingTableColumns = struct {
	ID                string
	Validatedfromuser string
	UserID            string
	TrainingdateID    string
}{
	ID:                "user_trainings.id",
	Validatedfromuser: "user_trainings.validatedfromuser",
	UserID:            "user_trainings.user_id",
	TrainingdateID:    "user_trainings.trainingdate_id",
}

// Generated where

var UserTrainingWhere = struct {
	ID                whereHelperint64
	Validatedfromuser whereHelperbool
	UserID            whereHelperint64
	TrainingdateID    whereHelperint64
}{
	ID:                whereHelperint64{field: "\"user_trainings\".\"id\""},
	Validatedfromuser: whereHelperbool{field: "\"user_trainings\".\"validatedfromuser\""},
	UserID:            whereHelperint64{field: "\"user_trainings\".\"user_id\""},
	TrainingdateID:    whereHelperint64{field: "\"user_trainings\".\"trainingdate_id\""},
}

// UserTrainingRels is where relationship names are stored.
var UserTrainingRels = struct {
	Trainingdate string
	User         string
}{
	Trainingdate: "Trainingdate",
	User:         "User",
}

// userTrainingR is where relationships are stored.
type userTrainingR struct {
	Trainingdate *TrainingDay `boil:"Trainingdate" json:"Trainingdate" toml:"Trainingdate" yaml:"Trainingdate"`
	User         *User        `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userTrainingR) NewStruct() *userTrainingR {
	return &userTrainingR{}
}

func (r *userTrainingR) GetTrainingdate() *TrainingDay {
	if r == nil {
		return nil
	}
	return r.Trainingdate
}

func (r *userTrainingR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userTrainingL is where Load methods for each relationship are stored.
type userTrainingL struct{}

var (
	userTrainingAllColumns            = []string{"id", "validatedfromuser", "user_id", "trainingdate_id"}
	userTrainingColumnsWithoutDefault = []string{"user_id", "trainingdate_id"}
	userTrainingColumnsWithDefault    = []string{"id", "validatedfromuser"}
	userTrainingPrimaryKeyColumns     = []string{"id"}
	userTrainingGeneratedColumns      = []string{}
)

type (
	// UserTrainingSlice is an alias for a slice of pointers to UserTraining.
	// This should almost always be used instead of []UserTraining.
	UserTrainingSlice []*UserTraining
	// UserTrainingHook is the signature for custom UserTraining hook methods
	UserTrainingHook func(context.Context, boil.ContextExecutor, *UserTraining) error

	userTrainingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTrainingType                 = reflect.TypeOf(&UserTraining{})
	userTrainingMapping              = queries.MakeStructMapping(userTrainingType)
	userTrainingPrimaryKeyMapping, _ = queries.BindMapping(userTrainingType, userTrainingMapping, userTrainingPrimaryKeyColumns)
	userTrainingInsertCacheMut       sync.RWMutex
	userTrainingInsertCache          = make(map[string]insertCache)
	userTrainingUpdateCacheMut       sync.RWMutex
	userTrainingUpdateCache          = make(map[string]updateCache)
	userTrainingUpsertCacheMut       sync.RWMutex
	userTrainingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTrainingAfterSelectHooks []UserTrainingHook

var userTrainingBeforeInsertHooks []UserTrainingHook
var userTrainingAfterInsertHooks []UserTrainingHook

var userTrainingBeforeUpdateHooks []UserTrainingHook
var userTrainingAfterUpdateHooks []UserTrainingHook

var userTrainingBeforeDeleteHooks []UserTrainingHook
var userTrainingAfterDeleteHooks []UserTrainingHook

var userTrainingBeforeUpsertHooks []UserTrainingHook
var userTrainingAfterUpsertHooks []UserTrainingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTraining) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTraining) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTraining) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTraining) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTraining) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTraining) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTraining) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTraining) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTraining) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTrainingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTrainingHook registers your hook function for all future operations.
func AddUserTrainingHook(hookPoint boil.HookPoint, userTrainingHook UserTrainingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTrainingAfterSelectHooks = append(userTrainingAfterSelectHooks, userTrainingHook)
	case boil.BeforeInsertHook:
		userTrainingBeforeInsertHooks = append(userTrainingBeforeInsertHooks, userTrainingHook)
	case boil.AfterInsertHook:
		userTrainingAfterInsertHooks = append(userTrainingAfterInsertHooks, userTrainingHook)
	case boil.BeforeUpdateHook:
		userTrainingBeforeUpdateHooks = append(userTrainingBeforeUpdateHooks, userTrainingHook)
	case boil.AfterUpdateHook:
		userTrainingAfterUpdateHooks = append(userTrainingAfterUpdateHooks, userTrainingHook)
	case boil.BeforeDeleteHook:
		userTrainingBeforeDeleteHooks = append(userTrainingBeforeDeleteHooks, userTrainingHook)
	case boil.AfterDeleteHook:
		userTrainingAfterDeleteHooks = append(userTrainingAfterDeleteHooks, userTrainingHook)
	case boil.BeforeUpsertHook:
		userTrainingBeforeUpsertHooks = append(userTrainingBeforeUpsertHooks, userTrainingHook)
	case boil.AfterUpsertHook:
		userTrainingAfterUpsertHooks = append(userTrainingAfterUpsertHooks, userTrainingHook)
	}
}

// One returns a single userTraining record from the query.
func (q userTrainingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserTraining, error) {
	o := &UserTraining{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_trainings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTraining records from the query.
func (q userTrainingQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserTrainingSlice, error) {
	var o []*UserTraining

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserTraining slice")
	}

	if len(userTrainingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTraining records in the query.
func (q userTrainingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_trainings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTrainingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_trainings exists")
	}

	return count > 0, nil
}

// Trainingdate pointed to by the foreign key.
func (o *UserTraining) Trainingdate(mods ...qm.QueryMod) trainingDayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrainingdateID),
	}

	queryMods = append(queryMods, mods...)

	return TrainingDays(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserTraining) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTrainingdate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTrainingL) LoadTrainingdate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTraining interface{}, mods queries.Applicator) error {
	var slice []*UserTraining
	var object *UserTraining

	if singular {
		var ok bool
		object, ok = maybeUserTraining.(*UserTraining)
		if !ok {
			object = new(UserTraining)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTraining))
			}
		}
	} else {
		s, ok := maybeUserTraining.(*[]*UserTraining)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTrainingR{}
		}
		args = append(args, object.TrainingdateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTrainingR{}
			}

			for _, a := range args {
				if a == obj.TrainingdateID {
					continue Outer
				}
			}

			args = append(args, obj.TrainingdateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_days`),
		qm.WhereIn(`training_days.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrainingDay")
	}

	var resultSlice []*TrainingDay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrainingDay")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for training_days")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_days")
	}

	if len(trainingDayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trainingdate = foreign
		if foreign.R == nil {
			foreign.R = &trainingDayR{}
		}
		foreign.R.TrainingdateUserTrainings = append(foreign.R.TrainingdateUserTrainings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrainingdateID == foreign.ID {
				local.R.Trainingdate = foreign
				if foreign.R == nil {
					foreign.R = &trainingDayR{}
				}
				foreign.R.TrainingdateUserTrainings = append(foreign.R.TrainingdateUserTrainings, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTrainingL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTraining interface{}, mods queries.Applicator) error {
	var slice []*UserTraining
	var object *UserTraining

	if singular {
		var ok bool
		object, ok = maybeUserTraining.(*UserTraining)
		if !ok {
			object = new(UserTraining)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTraining))
			}
		}
	} else {
		s, ok := maybeUserTraining.(*[]*UserTraining)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTrainingR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTrainingR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTrainings = append(foreign.R.UserTrainings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTrainings = append(foreign.R.UserTrainings, local)
				break
			}
		}
	}

	return nil
}

// SetTrainingdate of the userTraining to the related item.
// Sets o.R.Trainingdate to related.
// Adds o to related.R.TrainingdateUserTrainings.
func (o *UserTraining) SetTrainingdate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrainingDay) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trainingdate_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTrainingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrainingdateID = related.ID
	if o.R == nil {
		o.R = &userTrainingR{
			Trainingdate: related,
		}
	} else {
		o.R.Trainingdate = related
	}

	if related.R == nil {
		related.R = &trainingDayR{
			TrainingdateUserTrainings: UserTrainingSlice{o},
		}
	} else {
		related.R.TrainingdateUserTrainings = append(related.R.TrainingdateUserTrainings, o)
	}

	return nil
}

// SetUser of the userTraining to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTrainings.
func (o *UserTraining) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTrainingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userTrainingR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTrainings: UserTrainingSlice{o},
		}
	} else {
		related.R.UserTrainings = append(related.R.UserTrainings, o)
	}

	return nil
}

// UserTrainings retrieves all the records using an executor.
func UserTrainings(mods ...qm.QueryMod) userTrainingQuery {
	mods = append(mods, qm.From("\"user_trainings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_trainings\".*"})
	}

	return userTrainingQuery{q}
}

// FindUserTraining retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTraining(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserTraining, error) {
	userTrainingObj := &UserTraining{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_trainings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userTrainingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_trainings")
	}

	if err = userTrainingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userTrainingObj, err
	}

	return userTrainingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTraining) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_trainings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTrainingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTrainingInsertCacheMut.RLock()
	cache, cached := userTrainingInsertCache[key]
	userTrainingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTrainingAllColumns,
			userTrainingColumnsWithDefault,
			userTrainingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTrainingType, userTrainingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTrainingType, userTrainingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_trainings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_trainings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_trainings")
	}

	if !cached {
		userTrainingInsertCacheMut.Lock()
		userTrainingInsertCache[key] = cache
		userTrainingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserTraining.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTraining) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTrainingUpdateCacheMut.RLock()
	cache, cached := userTrainingUpdateCache[key]
	userTrainingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTrainingAllColumns,
			userTrainingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_trainings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_trainings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userTrainingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTrainingType, userTrainingMapping, append(wl, userTrainingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_trainings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_trainings")
	}

	if !cached {
		userTrainingUpdateCacheMut.Lock()
		userTrainingUpdateCache[key] = cache
		userTrainingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTrainingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_trainings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTrainingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userTrainingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userTraining slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userTraining")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTraining) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_trainings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTrainingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTrainingUpsertCacheMut.RLock()
	cache, cached := userTrainingUpsertCache[key]
	userTrainingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTrainingAllColumns,
			userTrainingColumnsWithDefault,
			userTrainingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTrainingAllColumns,
			userTrainingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_trainings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userTrainingPrimaryKeyColumns))
			copy(conflict, userTrainingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_trainings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userTrainingType, userTrainingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTrainingType, userTrainingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_trainings")
	}

	if !cached {
		userTrainingUpsertCacheMut.Lock()
		userTrainingUpsertCache[key] = cache
		userTrainingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserTraining record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTraining) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserTraining provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTrainingPrimaryKeyMapping)
	sql := "DELETE FROM \"user_trainings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_trainings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTrainingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userTrainingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_trainings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTrainingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTrainingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_trainings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTrainingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userTraining slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_trainings")
	}

	if len(userTrainingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTraining) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserTraining(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTrainingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTrainingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTrainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_trainings\".* FROM \"user_trainings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTrainingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserTrainingSlice")
	}

	*o = slice

	return nil
}

// UserTrainingExists checks if the UserTraining row exists.
func UserTrainingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_trainings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_trainings exists")
	}

	return exists, nil
}

// Exists checks if the UserTraining row exists.
func (o *UserTraining) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserTrainingExists(ctx, exec, o.ID)
}
