// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Training is an object representing the database table.
type Training struct {
	Isag                     bool        `boil:"isag" json:"isag" toml:"isag" yaml:"isag"`
	Timefrom                 time.Time   `boil:"timefrom" json:"timefrom" toml:"timefrom" yaml:"timefrom"`
	Timetill                 time.Time   `boil:"timetill" json:"timetill" toml:"timetill" yaml:"timetill"`
	Lastcreatedtrainingdates null.Time   `boil:"lastcreatedtrainingdates" json:"lastcreatedtrainingdates,omitempty" toml:"lastcreatedtrainingdates" yaml:"lastcreatedtrainingdates,omitempty"`
	Weekday                  string      `boil:"weekday" json:"weekday" toml:"weekday" yaml:"weekday"`
	Agefrom                  int         `boil:"agefrom" json:"agefrom" toml:"agefrom" yaml:"agefrom"`
	Agetill                  int         `boil:"agetill" json:"agetill" toml:"agetill" yaml:"agetill"`
	Color                    string      `boil:"color" json:"color" toml:"color" yaml:"color"`
	Deactivated              bool        `boil:"deactivated" json:"deactivated" toml:"deactivated" yaml:"deactivated"`
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                     string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Shortdescription         string      `boil:"shortdescription" json:"shortdescription" toml:"shortdescription" yaml:"shortdescription"`
	Text                     null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`
	Createdat                time.Time   `boil:"createdat" json:"createdat" toml:"createdat" yaml:"createdat"`
	Updatedat                time.Time   `boil:"updatedat" json:"updatedat" toml:"updatedat" yaml:"updatedat"`
	ImageID                  null.Int64  `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	LocationID               null.Int64  `boil:"location_id" json:"location_id,omitempty" toml:"location_id" yaml:"location_id,omitempty"`
	TrainerID                null.Int64  `boil:"trainer_id" json:"trainer_id,omitempty" toml:"trainer_id" yaml:"trainer_id,omitempty"`

	R *trainingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainingColumns = struct {
	Isag                     string
	Timefrom                 string
	Timetill                 string
	Lastcreatedtrainingdates string
	Weekday                  string
	Agefrom                  string
	Agetill                  string
	Color                    string
	Deactivated              string
	ID                       string
	Name                     string
	Shortdescription         string
	Text                     string
	Createdat                string
	Updatedat                string
	ImageID                  string
	LocationID               string
	TrainerID                string
}{
	Isag:                     "isag",
	Timefrom:                 "timefrom",
	Timetill:                 "timetill",
	Lastcreatedtrainingdates: "lastcreatedtrainingdates",
	Weekday:                  "weekday",
	Agefrom:                  "agefrom",
	Agetill:                  "agetill",
	Color:                    "color",
	Deactivated:              "deactivated",
	ID:                       "id",
	Name:                     "name",
	Shortdescription:         "shortdescription",
	Text:                     "text",
	Createdat:                "createdat",
	Updatedat:                "updatedat",
	ImageID:                  "image_id",
	LocationID:               "location_id",
	TrainerID:                "trainer_id",
}

var TrainingTableColumns = struct {
	Isag                     string
	Timefrom                 string
	Timetill                 string
	Lastcreatedtrainingdates string
	Weekday                  string
	Agefrom                  string
	Agetill                  string
	Color                    string
	Deactivated              string
	ID                       string
	Name                     string
	Shortdescription         string
	Text                     string
	Createdat                string
	Updatedat                string
	ImageID                  string
	LocationID               string
	TrainerID                string
}{
	Isag:                     "trainings.isag",
	Timefrom:                 "trainings.timefrom",
	Timetill:                 "trainings.timetill",
	Lastcreatedtrainingdates: "trainings.lastcreatedtrainingdates",
	Weekday:                  "trainings.weekday",
	Agefrom:                  "trainings.agefrom",
	Agetill:                  "trainings.agetill",
	Color:                    "trainings.color",
	Deactivated:              "trainings.deactivated",
	ID:                       "trainings.id",
	Name:                     "trainings.name",
	Shortdescription:         "trainings.shortdescription",
	Text:                     "trainings.text",
	Createdat:                "trainings.createdat",
	Updatedat:                "trainings.updatedat",
	ImageID:                  "trainings.image_id",
	LocationID:               "trainings.location_id",
	TrainerID:                "trainings.trainer_id",
}

// Generated where

var TrainingWhere = struct {
	Isag                     whereHelperbool
	Timefrom                 whereHelpertime_Time
	Timetill                 whereHelpertime_Time
	Lastcreatedtrainingdates whereHelpernull_Time
	Weekday                  whereHelperstring
	Agefrom                  whereHelperint
	Agetill                  whereHelperint
	Color                    whereHelperstring
	Deactivated              whereHelperbool
	ID                       whereHelperint64
	Name                     whereHelperstring
	Shortdescription         whereHelperstring
	Text                     whereHelpernull_String
	Createdat                whereHelpertime_Time
	Updatedat                whereHelpertime_Time
	ImageID                  whereHelpernull_Int64
	LocationID               whereHelpernull_Int64
	TrainerID                whereHelpernull_Int64
}{
	Isag:                     whereHelperbool{field: "\"trainings\".\"isag\""},
	Timefrom:                 whereHelpertime_Time{field: "\"trainings\".\"timefrom\""},
	Timetill:                 whereHelpertime_Time{field: "\"trainings\".\"timetill\""},
	Lastcreatedtrainingdates: whereHelpernull_Time{field: "\"trainings\".\"lastcreatedtrainingdates\""},
	Weekday:                  whereHelperstring{field: "\"trainings\".\"weekday\""},
	Agefrom:                  whereHelperint{field: "\"trainings\".\"agefrom\""},
	Agetill:                  whereHelperint{field: "\"trainings\".\"agetill\""},
	Color:                    whereHelperstring{field: "\"trainings\".\"color\""},
	Deactivated:              whereHelperbool{field: "\"trainings\".\"deactivated\""},
	ID:                       whereHelperint64{field: "\"trainings\".\"id\""},
	Name:                     whereHelperstring{field: "\"trainings\".\"name\""},
	Shortdescription:         whereHelperstring{field: "\"trainings\".\"shortdescription\""},
	Text:                     whereHelpernull_String{field: "\"trainings\".\"text\""},
	Createdat:                whereHelpertime_Time{field: "\"trainings\".\"createdat\""},
	Updatedat:                whereHelpertime_Time{field: "\"trainings\".\"updatedat\""},
	ImageID:                  whereHelpernull_Int64{field: "\"trainings\".\"image_id\""},
	LocationID:               whereHelpernull_Int64{field: "\"trainings\".\"location_id\""},
	TrainerID:                whereHelpernull_Int64{field: "\"trainings\".\"trainer_id\""},
}

// TrainingRels is where relationship names are stored.
var TrainingRels = struct {
	Image                 string
	Location              string
	Trainer               string
	TrainingDays          string
	TrainingTrainers      string
	UserTrainingInternals string
}{
	Image:                 "Image",
	Location:              "Location",
	Trainer:               "Trainer",
	TrainingDays:          "TrainingDays",
	TrainingTrainers:      "TrainingTrainers",
	UserTrainingInternals: "UserTrainingInternals",
}

// trainingR is where relationships are stored.
type trainingR struct {
	Image                 *Image                    `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Location              *Location                 `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
	Trainer               *Trainer                  `boil:"Trainer" json:"Trainer" toml:"Trainer" yaml:"Trainer"`
	TrainingDays          TrainingDaySlice          `boil:"TrainingDays" json:"TrainingDays" toml:"TrainingDays" yaml:"TrainingDays"`
	TrainingTrainers      TrainingTrainerSlice      `boil:"TrainingTrainers" json:"TrainingTrainers" toml:"TrainingTrainers" yaml:"TrainingTrainers"`
	UserTrainingInternals UserTrainingInternalSlice `boil:"UserTrainingInternals" json:"UserTrainingInternals" toml:"UserTrainingInternals" yaml:"UserTrainingInternals"`
}

// NewStruct creates a new relationship struct
func (*trainingR) NewStruct() *trainingR {
	return &trainingR{}
}

func (r *trainingR) GetImage() *Image {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *trainingR) GetLocation() *Location {
	if r == nil {
		return nil
	}
	return r.Location
}

func (r *trainingR) GetTrainer() *Trainer {
	if r == nil {
		return nil
	}
	return r.Trainer
}

func (r *trainingR) GetTrainingDays() TrainingDaySlice {
	if r == nil {
		return nil
	}
	return r.TrainingDays
}

func (r *trainingR) GetTrainingTrainers() TrainingTrainerSlice {
	if r == nil {
		return nil
	}
	return r.TrainingTrainers
}

func (r *trainingR) GetUserTrainingInternals() UserTrainingInternalSlice {
	if r == nil {
		return nil
	}
	return r.UserTrainingInternals
}

// trainingL is where Load methods for each relationship are stored.
type trainingL struct{}

var (
	trainingAllColumns            = []string{"isag", "timefrom", "timetill", "lastcreatedtrainingdates", "weekday", "agefrom", "agetill", "color", "deactivated", "id", "name", "shortdescription", "text", "createdat", "updatedat", "image_id", "location_id", "trainer_id"}
	trainingColumnsWithoutDefault = []string{"timefrom", "timetill", "weekday", "name", "shortdescription"}
	trainingColumnsWithDefault    = []string{"isag", "lastcreatedtrainingdates", "agefrom", "agetill", "color", "deactivated", "id", "text", "createdat", "updatedat", "image_id", "location_id", "trainer_id"}
	trainingPrimaryKeyColumns     = []string{"id"}
	trainingGeneratedColumns      = []string{}
)

type (
	// TrainingSlice is an alias for a slice of pointers to Training.
	// This should almost always be used instead of []Training.
	TrainingSlice []*Training
	// TrainingHook is the signature for custom Training hook methods
	TrainingHook func(context.Context, boil.ContextExecutor, *Training) error

	trainingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainingType                 = reflect.TypeOf(&Training{})
	trainingMapping              = queries.MakeStructMapping(trainingType)
	trainingPrimaryKeyMapping, _ = queries.BindMapping(trainingType, trainingMapping, trainingPrimaryKeyColumns)
	trainingInsertCacheMut       sync.RWMutex
	trainingInsertCache          = make(map[string]insertCache)
	trainingUpdateCacheMut       sync.RWMutex
	trainingUpdateCache          = make(map[string]updateCache)
	trainingUpsertCacheMut       sync.RWMutex
	trainingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainingAfterSelectHooks []TrainingHook

var trainingBeforeInsertHooks []TrainingHook
var trainingAfterInsertHooks []TrainingHook

var trainingBeforeUpdateHooks []TrainingHook
var trainingAfterUpdateHooks []TrainingHook

var trainingBeforeDeleteHooks []TrainingHook
var trainingAfterDeleteHooks []TrainingHook

var trainingBeforeUpsertHooks []TrainingHook
var trainingAfterUpsertHooks []TrainingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Training) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Training) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Training) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Training) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Training) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Training) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Training) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Training) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Training) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainingHook registers your hook function for all future operations.
func AddTrainingHook(hookPoint boil.HookPoint, trainingHook TrainingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainingAfterSelectHooks = append(trainingAfterSelectHooks, trainingHook)
	case boil.BeforeInsertHook:
		trainingBeforeInsertHooks = append(trainingBeforeInsertHooks, trainingHook)
	case boil.AfterInsertHook:
		trainingAfterInsertHooks = append(trainingAfterInsertHooks, trainingHook)
	case boil.BeforeUpdateHook:
		trainingBeforeUpdateHooks = append(trainingBeforeUpdateHooks, trainingHook)
	case boil.AfterUpdateHook:
		trainingAfterUpdateHooks = append(trainingAfterUpdateHooks, trainingHook)
	case boil.BeforeDeleteHook:
		trainingBeforeDeleteHooks = append(trainingBeforeDeleteHooks, trainingHook)
	case boil.AfterDeleteHook:
		trainingAfterDeleteHooks = append(trainingAfterDeleteHooks, trainingHook)
	case boil.BeforeUpsertHook:
		trainingBeforeUpsertHooks = append(trainingBeforeUpsertHooks, trainingHook)
	case boil.AfterUpsertHook:
		trainingAfterUpsertHooks = append(trainingAfterUpsertHooks, trainingHook)
	}
}

// One returns a single training record from the query.
func (q trainingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Training, error) {
	o := &Training{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trainings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Training records from the query.
func (q trainingQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainingSlice, error) {
	var o []*Training

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Training slice")
	}

	if len(trainingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Training records in the query.
func (q trainingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trainings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trainings exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *Training) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// Location pointed to by the foreign key.
func (o *Training) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	return Locations(queryMods...)
}

// Trainer pointed to by the foreign key.
func (o *Training) Trainer(mods ...qm.QueryMod) trainerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrainerID),
	}

	queryMods = append(queryMods, mods...)

	return Trainers(queryMods...)
}

// TrainingDays retrieves all the training_day's TrainingDays with an executor.
func (o *Training) TrainingDays(mods ...qm.QueryMod) trainingDayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"training_days\".\"training_id\"=?", o.ID),
	)

	return TrainingDays(queryMods...)
}

// TrainingTrainers retrieves all the training_trainer's TrainingTrainers with an executor.
func (o *Training) TrainingTrainers(mods ...qm.QueryMod) trainingTrainerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"training_trainers\".\"training_id\"=?", o.ID),
	)

	return TrainingTrainers(queryMods...)
}

// UserTrainingInternals retrieves all the user_training_internal's UserTrainingInternals with an executor.
func (o *Training) UserTrainingInternals(mods ...qm.QueryMod) userTrainingInternalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_training_internal\".\"training_id\"=?", o.ID),
	)

	return UserTrainingInternals(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Trainings = append(foreign.R.Trainings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Trainings = append(foreign.R.Trainings, local)
				break
			}
		}
	}

	return nil
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		if !queries.IsNil(object.LocationID) {
			args = append(args, object.LocationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LocationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LocationID) {
				args = append(args, obj.LocationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(locationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.Trainings = append(foreign.R.Trainings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LocationID, foreign.ID) {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Trainings = append(foreign.R.Trainings, local)
				break
			}
		}
	}

	return nil
}

// LoadTrainer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingL) LoadTrainer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		if !queries.IsNil(object.TrainerID) {
			args = append(args, object.TrainerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TrainerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TrainerID) {
				args = append(args, obj.TrainerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trainers`),
		qm.WhereIn(`trainers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trainer")
	}

	var resultSlice []*Trainer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trainer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trainers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trainers")
	}

	if len(trainerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trainer = foreign
		if foreign.R == nil {
			foreign.R = &trainerR{}
		}
		foreign.R.Trainings = append(foreign.R.Trainings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TrainerID, foreign.ID) {
				local.R.Trainer = foreign
				if foreign.R == nil {
					foreign.R = &trainerR{}
				}
				foreign.R.Trainings = append(foreign.R.Trainings, local)
				break
			}
		}
	}

	return nil
}

// LoadTrainingDays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingL) LoadTrainingDays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_days`),
		qm.WhereIn(`training_days.training_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load training_days")
	}

	var resultSlice []*TrainingDay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice training_days")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on training_days")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_days")
	}

	if len(trainingDayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrainingDays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingDayR{}
			}
			foreign.R.Training = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainingID {
				local.R.TrainingDays = append(local.R.TrainingDays, foreign)
				if foreign.R == nil {
					foreign.R = &trainingDayR{}
				}
				foreign.R.Training = local
				break
			}
		}
	}

	return nil
}

// LoadTrainingTrainers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingL) LoadTrainingTrainers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_trainers`),
		qm.WhereIn(`training_trainers.training_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load training_trainers")
	}

	var resultSlice []*TrainingTrainer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice training_trainers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on training_trainers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_trainers")
	}

	if len(trainingTrainerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrainingTrainers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingTrainerR{}
			}
			foreign.R.Training = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainingID {
				local.R.TrainingTrainers = append(local.R.TrainingTrainers, foreign)
				if foreign.R == nil {
					foreign.R = &trainingTrainerR{}
				}
				foreign.R.Training = local
				break
			}
		}
	}

	return nil
}

// LoadUserTrainingInternals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingL) LoadUserTrainingInternals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraining interface{}, mods queries.Applicator) error {
	var slice []*Training
	var object *Training

	if singular {
		var ok bool
		object, ok = maybeTraining.(*Training)
		if !ok {
			object = new(Training)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraining))
			}
		}
	} else {
		s, ok := maybeTraining.(*[]*Training)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraining)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraining))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_training_internal`),
		qm.WhereIn(`user_training_internal.training_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_training_internal")
	}

	var resultSlice []*UserTrainingInternal
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_training_internal")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_training_internal")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_training_internal")
	}

	if len(userTrainingInternalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTrainingInternals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userTrainingInternalR{}
			}
			foreign.R.Training = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainingID {
				local.R.UserTrainingInternals = append(local.R.UserTrainingInternals, foreign)
				if foreign.R == nil {
					foreign.R = &userTrainingInternalR{}
				}
				foreign.R.Training = local
				break
			}
		}
	}

	return nil
}

// SetImage of the training to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.Trainings.
func (o *Training) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, trainingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &trainingR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			Trainings: TrainingSlice{o},
		}
	} else {
		related.R.Trainings = append(related.R.Trainings, o)
	}

	return nil
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Training) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Trainings {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.Trainings)
		if ln > 1 && i < ln-1 {
			related.R.Trainings[i] = related.R.Trainings[ln-1]
		}
		related.R.Trainings = related.R.Trainings[:ln-1]
		break
	}
	return nil
}

// SetLocation of the training to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.Trainings.
func (o *Training) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, trainingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LocationID, related.ID)
	if o.R == nil {
		o.R = &trainingR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			Trainings: TrainingSlice{o},
		}
	} else {
		related.R.Trainings = append(related.R.Trainings, o)
	}

	return nil
}

// RemoveLocation relationship.
// Sets o.R.Location to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Training) RemoveLocation(ctx context.Context, exec boil.ContextExecutor, related *Location) error {
	var err error

	queries.SetScanner(&o.LocationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("location_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Location = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Trainings {
		if queries.Equal(o.LocationID, ri.LocationID) {
			continue
		}

		ln := len(related.R.Trainings)
		if ln > 1 && i < ln-1 {
			related.R.Trainings[i] = related.R.Trainings[ln-1]
		}
		related.R.Trainings = related.R.Trainings[:ln-1]
		break
	}
	return nil
}

// SetTrainer of the training to the related item.
// Sets o.R.Trainer to related.
// Adds o to related.R.Trainings.
func (o *Training) SetTrainer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Trainer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trainer_id"}),
		strmangle.WhereClause("\"", "\"", 2, trainingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TrainerID, related.ID)
	if o.R == nil {
		o.R = &trainingR{
			Trainer: related,
		}
	} else {
		o.R.Trainer = related
	}

	if related.R == nil {
		related.R = &trainerR{
			Trainings: TrainingSlice{o},
		}
	} else {
		related.R.Trainings = append(related.R.Trainings, o)
	}

	return nil
}

// RemoveTrainer relationship.
// Sets o.R.Trainer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Training) RemoveTrainer(ctx context.Context, exec boil.ContextExecutor, related *Trainer) error {
	var err error

	queries.SetScanner(&o.TrainerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("trainer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Trainer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Trainings {
		if queries.Equal(o.TrainerID, ri.TrainerID) {
			continue
		}

		ln := len(related.R.Trainings)
		if ln > 1 && i < ln-1 {
			related.R.Trainings[i] = related.R.Trainings[ln-1]
		}
		related.R.Trainings = related.R.Trainings[:ln-1]
		break
	}
	return nil
}

// AddTrainingDays adds the given related objects to the existing relationships
// of the training, optionally inserting them as new records.
// Appends related to o.R.TrainingDays.
// Sets related.R.Training appropriately.
func (o *Training) AddTrainingDays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrainingDay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"training_days\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"training_id"}),
				strmangle.WhereClause("\"", "\"", 2, trainingDayPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingR{
			TrainingDays: related,
		}
	} else {
		o.R.TrainingDays = append(o.R.TrainingDays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingDayR{
				Training: o,
			}
		} else {
			rel.R.Training = o
		}
	}
	return nil
}

// AddTrainingTrainers adds the given related objects to the existing relationships
// of the training, optionally inserting them as new records.
// Appends related to o.R.TrainingTrainers.
// Sets related.R.Training appropriately.
func (o *Training) AddTrainingTrainers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrainingTrainer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"training_trainers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"training_id"}),
				strmangle.WhereClause("\"", "\"", 2, trainingTrainerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingR{
			TrainingTrainers: related,
		}
	} else {
		o.R.TrainingTrainers = append(o.R.TrainingTrainers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingTrainerR{
				Training: o,
			}
		} else {
			rel.R.Training = o
		}
	}
	return nil
}

// AddUserTrainingInternals adds the given related objects to the existing relationships
// of the training, optionally inserting them as new records.
// Appends related to o.R.UserTrainingInternals.
// Sets related.R.Training appropriately.
func (o *Training) AddUserTrainingInternals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserTrainingInternal) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_training_internal\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"training_id"}),
				strmangle.WhereClause("\"", "\"", 2, userTrainingInternalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingR{
			UserTrainingInternals: related,
		}
	} else {
		o.R.UserTrainingInternals = append(o.R.UserTrainingInternals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userTrainingInternalR{
				Training: o,
			}
		} else {
			rel.R.Training = o
		}
	}
	return nil
}

// Trainings retrieves all the records using an executor.
func Trainings(mods ...qm.QueryMod) trainingQuery {
	mods = append(mods, qm.From("\"trainings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trainings\".*"})
	}

	return trainingQuery{q}
}

// FindTraining retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTraining(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Training, error) {
	trainingObj := &Training{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trainings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trainingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trainings")
	}

	if err = trainingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainingObj, err
	}

	return trainingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Training) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trainings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainingInsertCacheMut.RLock()
	cache, cached := trainingInsertCache[key]
	trainingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainingAllColumns,
			trainingColumnsWithDefault,
			trainingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainingType, trainingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainingType, trainingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trainings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trainings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trainings")
	}

	if !cached {
		trainingInsertCacheMut.Lock()
		trainingInsertCache[key] = cache
		trainingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Training.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Training) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainingUpdateCacheMut.RLock()
	cache, cached := trainingUpdateCache[key]
	trainingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainingAllColumns,
			trainingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trainings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trainings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trainingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainingType, trainingMapping, append(wl, trainingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trainings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trainings")
	}

	if !cached {
		trainingUpdateCacheMut.Lock()
		trainingUpdateCache[key] = cache
		trainingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trainings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trainings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trainingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in training slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all training")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Training) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trainings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainingUpsertCacheMut.RLock()
	cache, cached := trainingUpsertCache[key]
	trainingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainingAllColumns,
			trainingColumnsWithDefault,
			trainingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainingAllColumns,
			trainingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trainings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trainingPrimaryKeyColumns))
			copy(conflict, trainingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trainings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trainingType, trainingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainingType, trainingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trainings")
	}

	if !cached {
		trainingUpsertCacheMut.Lock()
		trainingUpsertCache[key] = cache
		trainingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Training record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Training) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Training provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainingPrimaryKeyMapping)
	sql := "DELETE FROM \"trainings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trainings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trainingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trainings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trainings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trainings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trainingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from training slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trainings")
	}

	if len(trainingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Training) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTraining(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trainings\".* FROM \"trainings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trainingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrainingSlice")
	}

	*o = slice

	return nil
}

// TrainingExists checks if the Training row exists.
func TrainingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trainings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trainings exists")
	}

	return exists, nil
}

// Exists checks if the Training row exists.
func (o *Training) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainingExists(ctx, exec, o.ID)
}
