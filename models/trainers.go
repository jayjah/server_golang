// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Trainer is an object representing the database table.
type Trainer struct {
	Agelabel         null.String `boil:"agelabel" json:"agelabel,omitempty" toml:"agelabel" yaml:"agelabel,omitempty"`
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Shortdescription string      `boil:"shortdescription" json:"shortdescription" toml:"shortdescription" yaml:"shortdescription"`
	Text             null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`
	Createdat        time.Time   `boil:"createdat" json:"createdat" toml:"createdat" yaml:"createdat"`
	Updatedat        time.Time   `boil:"updatedat" json:"updatedat" toml:"updatedat" yaml:"updatedat"`
	ImageID          int64       `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	UserID           null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *trainerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainerColumns = struct {
	Agelabel         string
	ID               string
	Name             string
	Shortdescription string
	Text             string
	Createdat        string
	Updatedat        string
	ImageID          string
	UserID           string
}{
	Agelabel:         "agelabel",
	ID:               "id",
	Name:             "name",
	Shortdescription: "shortdescription",
	Text:             "text",
	Createdat:        "createdat",
	Updatedat:        "updatedat",
	ImageID:          "image_id",
	UserID:           "user_id",
}

var TrainerTableColumns = struct {
	Agelabel         string
	ID               string
	Name             string
	Shortdescription string
	Text             string
	Createdat        string
	Updatedat        string
	ImageID          string
	UserID           string
}{
	Agelabel:         "trainers.agelabel",
	ID:               "trainers.id",
	Name:             "trainers.name",
	Shortdescription: "trainers.shortdescription",
	Text:             "trainers.text",
	Createdat:        "trainers.createdat",
	Updatedat:        "trainers.updatedat",
	ImageID:          "trainers.image_id",
	UserID:           "trainers.user_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TrainerWhere = struct {
	Agelabel         whereHelpernull_String
	ID               whereHelperint64
	Name             whereHelperstring
	Shortdescription whereHelperstring
	Text             whereHelpernull_String
	Createdat        whereHelpertime_Time
	Updatedat        whereHelpertime_Time
	ImageID          whereHelperint64
	UserID           whereHelpernull_Int64
}{
	Agelabel:         whereHelpernull_String{field: "\"trainers\".\"agelabel\""},
	ID:               whereHelperint64{field: "\"trainers\".\"id\""},
	Name:             whereHelperstring{field: "\"trainers\".\"name\""},
	Shortdescription: whereHelperstring{field: "\"trainers\".\"shortdescription\""},
	Text:             whereHelpernull_String{field: "\"trainers\".\"text\""},
	Createdat:        whereHelpertime_Time{field: "\"trainers\".\"createdat\""},
	Updatedat:        whereHelpertime_Time{field: "\"trainers\".\"updatedat\""},
	ImageID:          whereHelperint64{field: "\"trainers\".\"image_id\""},
	UserID:           whereHelpernull_Int64{field: "\"trainers\".\"user_id\""},
}

// TrainerRels is where relationship names are stored.
var TrainerRels = struct {
	Image            string
	User             string
	TrainingTrainers string
	Trainings        string
}{
	Image:            "Image",
	User:             "User",
	TrainingTrainers: "TrainingTrainers",
	Trainings:        "Trainings",
}

// trainerR is where relationships are stored.
type trainerR struct {
	Image            *Image               `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	User             *User                `boil:"User" json:"User" toml:"User" yaml:"User"`
	TrainingTrainers TrainingTrainerSlice `boil:"TrainingTrainers" json:"TrainingTrainers" toml:"TrainingTrainers" yaml:"TrainingTrainers"`
	Trainings        TrainingSlice        `boil:"Trainings" json:"Trainings" toml:"Trainings" yaml:"Trainings"`
}

// NewStruct creates a new relationship struct
func (*trainerR) NewStruct() *trainerR {
	return &trainerR{}
}

func (r *trainerR) GetImage() *Image {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *trainerR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *trainerR) GetTrainingTrainers() TrainingTrainerSlice {
	if r == nil {
		return nil
	}
	return r.TrainingTrainers
}

func (r *trainerR) GetTrainings() TrainingSlice {
	if r == nil {
		return nil
	}
	return r.Trainings
}

// trainerL is where Load methods for each relationship are stored.
type trainerL struct{}

var (
	trainerAllColumns            = []string{"agelabel", "id", "name", "shortdescription", "text", "createdat", "updatedat", "image_id", "user_id"}
	trainerColumnsWithoutDefault = []string{"name", "shortdescription", "image_id"}
	trainerColumnsWithDefault    = []string{"agelabel", "id", "text", "createdat", "updatedat", "user_id"}
	trainerPrimaryKeyColumns     = []string{"id"}
	trainerGeneratedColumns      = []string{}
)

type (
	// TrainerSlice is an alias for a slice of pointers to Trainer.
	// This should almost always be used instead of []Trainer.
	TrainerSlice []*Trainer
	// TrainerHook is the signature for custom Trainer hook methods
	TrainerHook func(context.Context, boil.ContextExecutor, *Trainer) error

	trainerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainerType                 = reflect.TypeOf(&Trainer{})
	trainerMapping              = queries.MakeStructMapping(trainerType)
	trainerPrimaryKeyMapping, _ = queries.BindMapping(trainerType, trainerMapping, trainerPrimaryKeyColumns)
	trainerInsertCacheMut       sync.RWMutex
	trainerInsertCache          = make(map[string]insertCache)
	trainerUpdateCacheMut       sync.RWMutex
	trainerUpdateCache          = make(map[string]updateCache)
	trainerUpsertCacheMut       sync.RWMutex
	trainerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainerAfterSelectHooks []TrainerHook

var trainerBeforeInsertHooks []TrainerHook
var trainerAfterInsertHooks []TrainerHook

var trainerBeforeUpdateHooks []TrainerHook
var trainerAfterUpdateHooks []TrainerHook

var trainerBeforeDeleteHooks []TrainerHook
var trainerAfterDeleteHooks []TrainerHook

var trainerBeforeUpsertHooks []TrainerHook
var trainerAfterUpsertHooks []TrainerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trainer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trainer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trainer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trainer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trainer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trainer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trainer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trainer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trainer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainerHook registers your hook function for all future operations.
func AddTrainerHook(hookPoint boil.HookPoint, trainerHook TrainerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainerAfterSelectHooks = append(trainerAfterSelectHooks, trainerHook)
	case boil.BeforeInsertHook:
		trainerBeforeInsertHooks = append(trainerBeforeInsertHooks, trainerHook)
	case boil.AfterInsertHook:
		trainerAfterInsertHooks = append(trainerAfterInsertHooks, trainerHook)
	case boil.BeforeUpdateHook:
		trainerBeforeUpdateHooks = append(trainerBeforeUpdateHooks, trainerHook)
	case boil.AfterUpdateHook:
		trainerAfterUpdateHooks = append(trainerAfterUpdateHooks, trainerHook)
	case boil.BeforeDeleteHook:
		trainerBeforeDeleteHooks = append(trainerBeforeDeleteHooks, trainerHook)
	case boil.AfterDeleteHook:
		trainerAfterDeleteHooks = append(trainerAfterDeleteHooks, trainerHook)
	case boil.BeforeUpsertHook:
		trainerBeforeUpsertHooks = append(trainerBeforeUpsertHooks, trainerHook)
	case boil.AfterUpsertHook:
		trainerAfterUpsertHooks = append(trainerAfterUpsertHooks, trainerHook)
	}
}

// One returns a single trainer record from the query.
func (q trainerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Trainer, error) {
	o := &Trainer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trainers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Trainer records from the query.
func (q trainerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainerSlice, error) {
	var o []*Trainer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Trainer slice")
	}

	if len(trainerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Trainer records in the query.
func (q trainerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trainers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trainers exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *Trainer) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// User pointed to by the foreign key.
func (o *Trainer) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// TrainingTrainers retrieves all the training_trainer's TrainingTrainers with an executor.
func (o *Trainer) TrainingTrainers(mods ...qm.QueryMod) trainingTrainerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"training_trainers\".\"trainer_id\"=?", o.ID),
	)

	return TrainingTrainers(queryMods...)
}

// Trainings retrieves all the training's Trainings with an executor.
func (o *Trainer) Trainings(mods ...qm.QueryMod) trainingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trainings\".\"trainer_id\"=?", o.ID),
	)

	return Trainings(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainerL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainer interface{}, mods queries.Applicator) error {
	var slice []*Trainer
	var object *Trainer

	if singular {
		var ok bool
		object, ok = maybeTrainer.(*Trainer)
		if !ok {
			object = new(Trainer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainer))
			}
		}
	} else {
		s, ok := maybeTrainer.(*[]*Trainer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainerR{}
		}
		args = append(args, object.ImageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainerR{}
			}

			for _, a := range args {
				if a == obj.ImageID {
					continue Outer
				}
			}

			args = append(args, obj.ImageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Trainers = append(foreign.R.Trainers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Trainers = append(foreign.R.Trainers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainer interface{}, mods queries.Applicator) error {
	var slice []*Trainer
	var object *Trainer

	if singular {
		var ok bool
		object, ok = maybeTrainer.(*Trainer)
		if !ok {
			object = new(Trainer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainer))
			}
		}
	} else {
		s, ok := maybeTrainer.(*[]*Trainer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainerR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Trainer = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Trainer = local
				break
			}
		}
	}

	return nil
}

// LoadTrainingTrainers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainerL) LoadTrainingTrainers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainer interface{}, mods queries.Applicator) error {
	var slice []*Trainer
	var object *Trainer

	if singular {
		var ok bool
		object, ok = maybeTrainer.(*Trainer)
		if !ok {
			object = new(Trainer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainer))
			}
		}
	} else {
		s, ok := maybeTrainer.(*[]*Trainer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_trainers`),
		qm.WhereIn(`training_trainers.trainer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load training_trainers")
	}

	var resultSlice []*TrainingTrainer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice training_trainers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on training_trainers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_trainers")
	}

	if len(trainingTrainerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrainingTrainers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingTrainerR{}
			}
			foreign.R.Trainer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainerID {
				local.R.TrainingTrainers = append(local.R.TrainingTrainers, foreign)
				if foreign.R == nil {
					foreign.R = &trainingTrainerR{}
				}
				foreign.R.Trainer = local
				break
			}
		}
	}

	return nil
}

// LoadTrainings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainerL) LoadTrainings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainer interface{}, mods queries.Applicator) error {
	var slice []*Trainer
	var object *Trainer

	if singular {
		var ok bool
		object, ok = maybeTrainer.(*Trainer)
		if !ok {
			object = new(Trainer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainer))
			}
		}
	} else {
		s, ok := maybeTrainer.(*[]*Trainer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trainings`),
		qm.WhereIn(`trainings.trainer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trainings")
	}

	var resultSlice []*Training
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trainings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trainings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trainings")
	}

	if len(trainingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Trainings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingR{}
			}
			foreign.R.Trainer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TrainerID) {
				local.R.Trainings = append(local.R.Trainings, foreign)
				if foreign.R == nil {
					foreign.R = &trainingR{}
				}
				foreign.R.Trainer = local
				break
			}
		}
	}

	return nil
}

// SetImage of the trainer to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.Trainers.
func (o *Trainer) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trainers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, trainerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ID
	if o.R == nil {
		o.R = &trainerR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			Trainers: TrainerSlice{o},
		}
	} else {
		related.R.Trainers = append(related.R.Trainers, o)
	}

	return nil
}

// SetUser of the trainer to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Trainer.
func (o *Trainer) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trainers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, trainerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &trainerR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Trainer: o,
		}
	} else {
		related.R.Trainer = o
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Trainer) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Trainer = nil
	return nil
}

// AddTrainingTrainers adds the given related objects to the existing relationships
// of the trainer, optionally inserting them as new records.
// Appends related to o.R.TrainingTrainers.
// Sets related.R.Trainer appropriately.
func (o *Trainer) AddTrainingTrainers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrainingTrainer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"training_trainers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"trainer_id"}),
				strmangle.WhereClause("\"", "\"", 2, trainingTrainerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainerR{
			TrainingTrainers: related,
		}
	} else {
		o.R.TrainingTrainers = append(o.R.TrainingTrainers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingTrainerR{
				Trainer: o,
			}
		} else {
			rel.R.Trainer = o
		}
	}
	return nil
}

// AddTrainings adds the given related objects to the existing relationships
// of the trainer, optionally inserting them as new records.
// Appends related to o.R.Trainings.
// Sets related.R.Trainer appropriately.
func (o *Trainer) AddTrainings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Training) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TrainerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trainings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"trainer_id"}),
				strmangle.WhereClause("\"", "\"", 2, trainingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TrainerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &trainerR{
			Trainings: related,
		}
	} else {
		o.R.Trainings = append(o.R.Trainings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingR{
				Trainer: o,
			}
		} else {
			rel.R.Trainer = o
		}
	}
	return nil
}

// SetTrainings removes all previously related items of the
// trainer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Trainer's Trainings accordingly.
// Replaces o.R.Trainings with related.
// Sets related.R.Trainer's Trainings accordingly.
func (o *Trainer) SetTrainings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Training) error {
	query := "update \"trainings\" set \"trainer_id\" = null where \"trainer_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Trainings {
			queries.SetScanner(&rel.TrainerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Trainer = nil
		}
		o.R.Trainings = nil
	}

	return o.AddTrainings(ctx, exec, insert, related...)
}

// RemoveTrainings relationships from objects passed in.
// Removes related items from R.Trainings (uses pointer comparison, removal does not keep order)
// Sets related.R.Trainer.
func (o *Trainer) RemoveTrainings(ctx context.Context, exec boil.ContextExecutor, related ...*Training) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TrainerID, nil)
		if rel.R != nil {
			rel.R.Trainer = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("trainer_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Trainings {
			if rel != ri {
				continue
			}

			ln := len(o.R.Trainings)
			if ln > 1 && i < ln-1 {
				o.R.Trainings[i] = o.R.Trainings[ln-1]
			}
			o.R.Trainings = o.R.Trainings[:ln-1]
			break
		}
	}

	return nil
}

// Trainers retrieves all the records using an executor.
func Trainers(mods ...qm.QueryMod) trainerQuery {
	mods = append(mods, qm.From("\"trainers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trainers\".*"})
	}

	return trainerQuery{q}
}

// FindTrainer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrainer(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Trainer, error) {
	trainerObj := &Trainer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trainers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trainerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trainers")
	}

	if err = trainerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainerObj, err
	}

	return trainerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trainer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trainers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainerInsertCacheMut.RLock()
	cache, cached := trainerInsertCache[key]
	trainerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainerAllColumns,
			trainerColumnsWithDefault,
			trainerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainerType, trainerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainerType, trainerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trainers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trainers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trainers")
	}

	if !cached {
		trainerInsertCacheMut.Lock()
		trainerInsertCache[key] = cache
		trainerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Trainer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trainer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainerUpdateCacheMut.RLock()
	cache, cached := trainerUpdateCache[key]
	trainerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainerAllColumns,
			trainerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trainers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trainers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trainerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainerType, trainerMapping, append(wl, trainerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trainers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trainers")
	}

	if !cached {
		trainerUpdateCacheMut.Lock()
		trainerUpdateCache[key] = cache
		trainerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trainers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trainers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trainers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trainerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trainer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trainer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trainer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trainers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainerUpsertCacheMut.RLock()
	cache, cached := trainerUpsertCache[key]
	trainerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainerAllColumns,
			trainerColumnsWithDefault,
			trainerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainerAllColumns,
			trainerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trainers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trainerPrimaryKeyColumns))
			copy(conflict, trainerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trainers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trainerType, trainerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainerType, trainerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trainers")
	}

	if !cached {
		trainerUpsertCacheMut.Lock()
		trainerUpsertCache[key] = cache
		trainerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Trainer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trainer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Trainer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainerPrimaryKeyMapping)
	sql := "DELETE FROM \"trainers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trainers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trainers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trainerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trainers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trainers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trainers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trainerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trainer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trainers")
	}

	if len(trainerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trainer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrainer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trainers\".* FROM \"trainers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trainerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrainerSlice")
	}

	*o = slice

	return nil
}

// TrainerExists checks if the Trainer row exists.
func TrainerExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trainers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trainers exists")
	}

	return exists, nil
}

// Exists checks if the Trainer row exists.
func (o *Trainer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainerExists(ctx, exec, o.ID)
}
